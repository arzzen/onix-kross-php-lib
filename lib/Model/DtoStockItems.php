<?php
/**
 * DtoStockItems
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ONIX API
 *
 * Dokumentácia ku Web API programu ONIX.  Pre testovanie s reálnymi dátami (dotazovanie servera) je potrebné zadať autorizačný token, ktorý Vám poskytla firma Kros a.s..  Pri každom dotaze je potrebné uviesť cestu ku databáze s dátami (taktiež poskytnutú firmou Kros a.s.).
 *
 * The version of the OpenAPI document: V1
 * Contact: servis.onix@kros.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DtoStockItems Class Doc Comment
 *
 * @category Class
 * @description DTO trieda pre skladovú kartu.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DtoStockItems implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DtoStockItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_record' => 'int',
        'name' => 'string',
        'managerial_price_type' => 'int',
        'managerial_price' => 'double',
        'info' => 'string',
        'account_stock_syn' => 'string',
        'account_stock_anl' => 'string',
        'account_issue_syn' => 'string',
        'account_issue_anl' => 'string',
        'account_recive_syn' => 'string',
        'account_recive_anl' => 'string',
        'account_profit_syn' => 'string',
        'account_profit_anl' => 'string',
        'default_price' => 'double',
        'ist_code' => 'string',
        'ist_dmj' => 'double',
        'ist_weight' => 'double',
        'ist_country_name' => 'string',
        'ist_description' => 'string',
        'supplier_codes' => 'string',
        'recycle_rate_per_kg' => 'double',
        'recycle_tax' => 'double',
        'weight' => 'double',
        'measure_units_default_name' => 'string',
        'product_code' => 'string',
        'ns_code' => 'string',
        'ns_number' => 'string',
        'plu' => 'int',
        'use_serial_number' => 'bool',
        'stock_item_balance' => '\OpenAPI\Client\Model\DtoStockItemBalance[]',
        'stock_item_groups' => '\OpenAPI\Client\Model\DtoStockItemGroup[]',
        'stock_item_params' => '\OpenAPI\Client\Model\DtoStockItemParam[]',
        'stock_item_codes' => '\OpenAPI\Client\Model\DtoStockItemCode[]',
        'stock_item_accessories' => '\OpenAPI\Client\Model\DtoStockItemAndServiceAccessory[]',
        'enclosures' => '\OpenAPI\Client\Model\DtoStockItemEnclosure[]',
        'vat_rate' => 'string',
        'common_mu_amount' => 'double',
        'date_add' => '\DateTime',
        'date_changed' => '\DateTime',
        'id_stock_items_group_default' => 'int',
        'common_mu_name' => 'string',
        'type' => 'int',
        'stock_item_alternatives' => '\OpenAPI\Client\Model\DtoStockItemAndServiceAlternative[]',
        'product_code_type' => 'string',
        'custom_columns' => '\OpenAPI\Client\Model\CustomField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_record' => 'int64',
        'name' => null,
        'managerial_price_type' => 'int32',
        'managerial_price' => 'double',
        'info' => null,
        'account_stock_syn' => null,
        'account_stock_anl' => null,
        'account_issue_syn' => null,
        'account_issue_anl' => null,
        'account_recive_syn' => null,
        'account_recive_anl' => null,
        'account_profit_syn' => null,
        'account_profit_anl' => null,
        'default_price' => 'double',
        'ist_code' => null,
        'ist_dmj' => 'double',
        'ist_weight' => 'double',
        'ist_country_name' => null,
        'ist_description' => null,
        'supplier_codes' => null,
        'recycle_rate_per_kg' => 'double',
        'recycle_tax' => 'double',
        'weight' => 'double',
        'measure_units_default_name' => null,
        'product_code' => null,
        'ns_code' => null,
        'ns_number' => null,
        'plu' => 'int64',
        'use_serial_number' => null,
        'stock_item_balance' => null,
        'stock_item_groups' => null,
        'stock_item_params' => null,
        'stock_item_codes' => null,
        'stock_item_accessories' => null,
        'enclosures' => null,
        'vat_rate' => null,
        'common_mu_amount' => 'double',
        'date_add' => 'date-time',
        'date_changed' => 'date-time',
        'id_stock_items_group_default' => 'int64',
        'common_mu_name' => null,
        'type' => 'int32',
        'stock_item_alternatives' => null,
        'product_code_type' => null,
        'custom_columns' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_record' => 'IdRecord',
        'name' => 'Name',
        'managerial_price_type' => 'Managerial_Price_Type',
        'managerial_price' => 'Managerial_Price',
        'info' => 'Info',
        'account_stock_syn' => 'Account_Stock_Syn',
        'account_stock_anl' => 'Account_Stock_Anl',
        'account_issue_syn' => 'Account_Issue_Syn',
        'account_issue_anl' => 'Account_Issue_Anl',
        'account_recive_syn' => 'Account_Recive_Syn',
        'account_recive_anl' => 'Account_Recive_Anl',
        'account_profit_syn' => 'Account_Profit_Syn',
        'account_profit_anl' => 'Account_Profit_Anl',
        'default_price' => 'Default_Price',
        'ist_code' => 'Ist_Code',
        'ist_dmj' => 'Ist_Dmj',
        'ist_weight' => 'Ist_Weight',
        'ist_country_name' => 'Ist_Country_Name',
        'ist_description' => 'Ist_Description',
        'supplier_codes' => 'Supplier_Codes',
        'recycle_rate_per_kg' => 'Recycle_Rate_Per_Kg',
        'recycle_tax' => 'Recycle_Tax',
        'weight' => 'Weight',
        'measure_units_default_name' => 'Measure_Units_Default_Name',
        'product_code' => 'Product_Code',
        'ns_code' => 'Ns_Code',
        'ns_number' => 'Ns_Number',
        'plu' => 'Plu',
        'use_serial_number' => 'Use_Serial_Number',
        'stock_item_balance' => 'StockItemBalance',
        'stock_item_groups' => 'StockItemGroups',
        'stock_item_params' => 'StockItemParams',
        'stock_item_codes' => 'StockItemCodes',
        'stock_item_accessories' => 'StockItemAccessories',
        'enclosures' => 'Enclosures',
        'vat_rate' => 'VatRate',
        'common_mu_amount' => 'Common_Mu_Amount',
        'date_add' => 'Date_Add',
        'date_changed' => 'Date_Changed',
        'id_stock_items_group_default' => 'Id_Stock_Items_Group_Default',
        'common_mu_name' => 'Common_Mu_Name',
        'type' => 'Type',
        'stock_item_alternatives' => 'StockItemAlternatives',
        'product_code_type' => 'Product_Code_Type',
        'custom_columns' => 'CustomColumns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_record' => 'setIdRecord',
        'name' => 'setName',
        'managerial_price_type' => 'setManagerialPriceType',
        'managerial_price' => 'setManagerialPrice',
        'info' => 'setInfo',
        'account_stock_syn' => 'setAccountStockSyn',
        'account_stock_anl' => 'setAccountStockAnl',
        'account_issue_syn' => 'setAccountIssueSyn',
        'account_issue_anl' => 'setAccountIssueAnl',
        'account_recive_syn' => 'setAccountReciveSyn',
        'account_recive_anl' => 'setAccountReciveAnl',
        'account_profit_syn' => 'setAccountProfitSyn',
        'account_profit_anl' => 'setAccountProfitAnl',
        'default_price' => 'setDefaultPrice',
        'ist_code' => 'setIstCode',
        'ist_dmj' => 'setIstDmj',
        'ist_weight' => 'setIstWeight',
        'ist_country_name' => 'setIstCountryName',
        'ist_description' => 'setIstDescription',
        'supplier_codes' => 'setSupplierCodes',
        'recycle_rate_per_kg' => 'setRecycleRatePerKg',
        'recycle_tax' => 'setRecycleTax',
        'weight' => 'setWeight',
        'measure_units_default_name' => 'setMeasureUnitsDefaultName',
        'product_code' => 'setProductCode',
        'ns_code' => 'setNsCode',
        'ns_number' => 'setNsNumber',
        'plu' => 'setPlu',
        'use_serial_number' => 'setUseSerialNumber',
        'stock_item_balance' => 'setStockItemBalance',
        'stock_item_groups' => 'setStockItemGroups',
        'stock_item_params' => 'setStockItemParams',
        'stock_item_codes' => 'setStockItemCodes',
        'stock_item_accessories' => 'setStockItemAccessories',
        'enclosures' => 'setEnclosures',
        'vat_rate' => 'setVatRate',
        'common_mu_amount' => 'setCommonMuAmount',
        'date_add' => 'setDateAdd',
        'date_changed' => 'setDateChanged',
        'id_stock_items_group_default' => 'setIdStockItemsGroupDefault',
        'common_mu_name' => 'setCommonMuName',
        'type' => 'setType',
        'stock_item_alternatives' => 'setStockItemAlternatives',
        'product_code_type' => 'setProductCodeType',
        'custom_columns' => 'setCustomColumns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_record' => 'getIdRecord',
        'name' => 'getName',
        'managerial_price_type' => 'getManagerialPriceType',
        'managerial_price' => 'getManagerialPrice',
        'info' => 'getInfo',
        'account_stock_syn' => 'getAccountStockSyn',
        'account_stock_anl' => 'getAccountStockAnl',
        'account_issue_syn' => 'getAccountIssueSyn',
        'account_issue_anl' => 'getAccountIssueAnl',
        'account_recive_syn' => 'getAccountReciveSyn',
        'account_recive_anl' => 'getAccountReciveAnl',
        'account_profit_syn' => 'getAccountProfitSyn',
        'account_profit_anl' => 'getAccountProfitAnl',
        'default_price' => 'getDefaultPrice',
        'ist_code' => 'getIstCode',
        'ist_dmj' => 'getIstDmj',
        'ist_weight' => 'getIstWeight',
        'ist_country_name' => 'getIstCountryName',
        'ist_description' => 'getIstDescription',
        'supplier_codes' => 'getSupplierCodes',
        'recycle_rate_per_kg' => 'getRecycleRatePerKg',
        'recycle_tax' => 'getRecycleTax',
        'weight' => 'getWeight',
        'measure_units_default_name' => 'getMeasureUnitsDefaultName',
        'product_code' => 'getProductCode',
        'ns_code' => 'getNsCode',
        'ns_number' => 'getNsNumber',
        'plu' => 'getPlu',
        'use_serial_number' => 'getUseSerialNumber',
        'stock_item_balance' => 'getStockItemBalance',
        'stock_item_groups' => 'getStockItemGroups',
        'stock_item_params' => 'getStockItemParams',
        'stock_item_codes' => 'getStockItemCodes',
        'stock_item_accessories' => 'getStockItemAccessories',
        'enclosures' => 'getEnclosures',
        'vat_rate' => 'getVatRate',
        'common_mu_amount' => 'getCommonMuAmount',
        'date_add' => 'getDateAdd',
        'date_changed' => 'getDateChanged',
        'id_stock_items_group_default' => 'getIdStockItemsGroupDefault',
        'common_mu_name' => 'getCommonMuName',
        'type' => 'getType',
        'stock_item_alternatives' => 'getStockItemAlternatives',
        'product_code_type' => 'getProductCodeType',
        'custom_columns' => 'getCustomColumns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_0 = 0;
    const TYPE_1 = 1;
    const TYPE_2 = 2;
    const TYPE_3 = 3;
    const TYPE_4 = 4;
    const TYPE_5 = 5;
    const TYPE_6 = 6;
    const TYPE_7 = 7;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_0,
            self::TYPE_1,
            self::TYPE_2,
            self::TYPE_3,
            self::TYPE_4,
            self::TYPE_5,
            self::TYPE_6,
            self::TYPE_7,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_record'] = $data['id_record'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['managerial_price_type'] = $data['managerial_price_type'] ?? null;
        $this->container['managerial_price'] = $data['managerial_price'] ?? null;
        $this->container['info'] = $data['info'] ?? null;
        $this->container['account_stock_syn'] = $data['account_stock_syn'] ?? null;
        $this->container['account_stock_anl'] = $data['account_stock_anl'] ?? null;
        $this->container['account_issue_syn'] = $data['account_issue_syn'] ?? null;
        $this->container['account_issue_anl'] = $data['account_issue_anl'] ?? null;
        $this->container['account_recive_syn'] = $data['account_recive_syn'] ?? null;
        $this->container['account_recive_anl'] = $data['account_recive_anl'] ?? null;
        $this->container['account_profit_syn'] = $data['account_profit_syn'] ?? null;
        $this->container['account_profit_anl'] = $data['account_profit_anl'] ?? null;
        $this->container['default_price'] = $data['default_price'] ?? null;
        $this->container['ist_code'] = $data['ist_code'] ?? null;
        $this->container['ist_dmj'] = $data['ist_dmj'] ?? null;
        $this->container['ist_weight'] = $data['ist_weight'] ?? null;
        $this->container['ist_country_name'] = $data['ist_country_name'] ?? null;
        $this->container['ist_description'] = $data['ist_description'] ?? null;
        $this->container['supplier_codes'] = $data['supplier_codes'] ?? null;
        $this->container['recycle_rate_per_kg'] = $data['recycle_rate_per_kg'] ?? null;
        $this->container['recycle_tax'] = $data['recycle_tax'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['measure_units_default_name'] = $data['measure_units_default_name'] ?? null;
        $this->container['product_code'] = $data['product_code'] ?? null;
        $this->container['ns_code'] = $data['ns_code'] ?? null;
        $this->container['ns_number'] = $data['ns_number'] ?? null;
        $this->container['plu'] = $data['plu'] ?? null;
        $this->container['use_serial_number'] = $data['use_serial_number'] ?? null;
        $this->container['stock_item_balance'] = $data['stock_item_balance'] ?? null;
        $this->container['stock_item_groups'] = $data['stock_item_groups'] ?? null;
        $this->container['stock_item_params'] = $data['stock_item_params'] ?? null;
        $this->container['stock_item_codes'] = $data['stock_item_codes'] ?? null;
        $this->container['stock_item_accessories'] = $data['stock_item_accessories'] ?? null;
        $this->container['enclosures'] = $data['enclosures'] ?? null;
        $this->container['vat_rate'] = $data['vat_rate'] ?? null;
        $this->container['common_mu_amount'] = $data['common_mu_amount'] ?? null;
        $this->container['date_add'] = $data['date_add'] ?? null;
        $this->container['date_changed'] = $data['date_changed'] ?? null;
        $this->container['id_stock_items_group_default'] = $data['id_stock_items_group_default'] ?? null;
        $this->container['common_mu_name'] = $data['common_mu_name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['stock_item_alternatives'] = $data['stock_item_alternatives'] ?? null;
        $this->container['product_code_type'] = $data['product_code_type'] ?? null;
        $this->container['custom_columns'] = $data['custom_columns'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_record
     *
     * @return int|null
     */
    public function getIdRecord()
    {
        return $this->container['id_record'];
    }

    /**
     * Sets id_record
     *
     * @param int|null $id_record ID záznamu
     *
     * @return self
     */
    public function setIdRecord($id_record)
    {
        $this->container['id_record'] = $id_record;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Názov skladovej karty.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets managerial_price_type
     *
     * @return int|null
     */
    public function getManagerialPriceType()
    {
        return $this->container['managerial_price_type'];
    }

    /**
     * Sets managerial_price_type
     *
     * @param int|null $managerial_price_type Typ manažérskeho ocenenia.  0 - Nezadaný,  1 - Manažérska cena = legislatívna,  2 - Vážený aritmetický priemer,  3 - First In First Out,  7 - Fixná cena.
     *
     * @return self
     */
    public function setManagerialPriceType($managerial_price_type)
    {
        $this->container['managerial_price_type'] = $managerial_price_type;

        return $this;
    }

    /**
     * Gets managerial_price
     *
     * @return double|null
     */
    public function getManagerialPrice()
    {
        return $this->container['managerial_price'];
    }

    /**
     * Sets managerial_price
     *
     * @param double|null $managerial_price Fixná cena.
     *
     * @return self
     */
    public function setManagerialPrice($managerial_price)
    {
        $this->container['managerial_price'] = $managerial_price;

        return $this;
    }

    /**
     * Gets info
     *
     * @return string|null
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param string|null $info Popis.
     *
     * @return self
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets account_stock_syn
     *
     * @return string|null
     */
    public function getAccountStockSyn()
    {
        return $this->container['account_stock_syn'];
    }

    /**
     * Sets account_stock_syn
     *
     * @param string|null $account_stock_syn Účet karty - syntetika.
     *
     * @return self
     */
    public function setAccountStockSyn($account_stock_syn)
    {
        $this->container['account_stock_syn'] = $account_stock_syn;

        return $this;
    }

    /**
     * Gets account_stock_anl
     *
     * @return string|null
     */
    public function getAccountStockAnl()
    {
        return $this->container['account_stock_anl'];
    }

    /**
     * Sets account_stock_anl
     *
     * @param string|null $account_stock_anl Účet karty - analytika.
     *
     * @return self
     */
    public function setAccountStockAnl($account_stock_anl)
    {
        $this->container['account_stock_anl'] = $account_stock_anl;

        return $this;
    }

    /**
     * Gets account_issue_syn
     *
     * @return string|null
     */
    public function getAccountIssueSyn()
    {
        return $this->container['account_issue_syn'];
    }

    /**
     * Sets account_issue_syn
     *
     * @param string|null $account_issue_syn Nákladový účet - syntetika.
     *
     * @return self
     */
    public function setAccountIssueSyn($account_issue_syn)
    {
        $this->container['account_issue_syn'] = $account_issue_syn;

        return $this;
    }

    /**
     * Gets account_issue_anl
     *
     * @return string|null
     */
    public function getAccountIssueAnl()
    {
        return $this->container['account_issue_anl'];
    }

    /**
     * Sets account_issue_anl
     *
     * @param string|null $account_issue_anl Nákladový účet - analytika.
     *
     * @return self
     */
    public function setAccountIssueAnl($account_issue_anl)
    {
        $this->container['account_issue_anl'] = $account_issue_anl;

        return $this;
    }

    /**
     * Gets account_recive_syn
     *
     * @return string|null
     */
    public function getAccountReciveSyn()
    {
        return $this->container['account_recive_syn'];
    }

    /**
     * Sets account_recive_syn
     *
     * @param string|null $account_recive_syn Účet obstarania - syntetika.
     *
     * @return self
     */
    public function setAccountReciveSyn($account_recive_syn)
    {
        $this->container['account_recive_syn'] = $account_recive_syn;

        return $this;
    }

    /**
     * Gets account_recive_anl
     *
     * @return string|null
     */
    public function getAccountReciveAnl()
    {
        return $this->container['account_recive_anl'];
    }

    /**
     * Sets account_recive_anl
     *
     * @param string|null $account_recive_anl Účet obstarania - analytika.
     *
     * @return self
     */
    public function setAccountReciveAnl($account_recive_anl)
    {
        $this->container['account_recive_anl'] = $account_recive_anl;

        return $this;
    }

    /**
     * Gets account_profit_syn
     *
     * @return string|null
     */
    public function getAccountProfitSyn()
    {
        return $this->container['account_profit_syn'];
    }

    /**
     * Sets account_profit_syn
     *
     * @param string|null $account_profit_syn Účet fakturácie - syntetika.
     *
     * @return self
     */
    public function setAccountProfitSyn($account_profit_syn)
    {
        $this->container['account_profit_syn'] = $account_profit_syn;

        return $this;
    }

    /**
     * Gets account_profit_anl
     *
     * @return string|null
     */
    public function getAccountProfitAnl()
    {
        return $this->container['account_profit_anl'];
    }

    /**
     * Sets account_profit_anl
     *
     * @param string|null $account_profit_anl Účet fakturácie - analytika.
     *
     * @return self
     */
    public function setAccountProfitAnl($account_profit_anl)
    {
        $this->container['account_profit_anl'] = $account_profit_anl;

        return $this;
    }

    /**
     * Gets default_price
     *
     * @return double|null
     */
    public function getDefaultPrice()
    {
        return $this->container['default_price'];
    }

    /**
     * Sets default_price
     *
     * @param double|null $default_price Predajná cena.
     *
     * @return self
     */
    public function setDefaultPrice($default_price)
    {
        $this->container['default_price'] = $default_price;

        return $this;
    }

    /**
     * Gets ist_code
     *
     * @return string|null
     */
    public function getIstCode()
    {
        return $this->container['ist_code'];
    }

    /**
     * Sets ist_code
     *
     * @param string|null $ist_code Intrastat - Kód kombinovanej nomenklatúry.
     *
     * @return self
     */
    public function setIstCode($ist_code)
    {
        $this->container['ist_code'] = $ist_code;

        return $this;
    }

    /**
     * Gets ist_dmj
     *
     * @return double|null
     */
    public function getIstDmj()
    {
        return $this->container['ist_dmj'];
    }

    /**
     * Sets ist_dmj
     *
     * @param double|null $ist_dmj Intrastat - Koeficient prepočtu na DMJ.
     *
     * @return self
     */
    public function setIstDmj($ist_dmj)
    {
        $this->container['ist_dmj'] = $ist_dmj;

        return $this;
    }

    /**
     * Gets ist_weight
     *
     * @return double|null
     */
    public function getIstWeight()
    {
        return $this->container['ist_weight'];
    }

    /**
     * Sets ist_weight
     *
     * @param double|null $ist_weight Intrastat - Čistá hmotnosť hlavnej MJ (kg).
     *
     * @return self
     */
    public function setIstWeight($ist_weight)
    {
        $this->container['ist_weight'] = $ist_weight;

        return $this;
    }

    /**
     * Gets ist_country_name
     *
     * @return string|null
     */
    public function getIstCountryName()
    {
        return $this->container['ist_country_name'];
    }

    /**
     * Sets ist_country_name
     *
     * @param string|null $ist_country_name Intrastat - Krajina pôvodu.
     *
     * @return self
     */
    public function setIstCountryName($ist_country_name)
    {
        $this->container['ist_country_name'] = $ist_country_name;

        return $this;
    }

    /**
     * Gets ist_description
     *
     * @return string|null
     */
    public function getIstDescription()
    {
        return $this->container['ist_description'];
    }

    /**
     * Sets ist_description
     *
     * @param string|null $ist_description Intrastat - Opis tovaru.
     *
     * @return self
     */
    public function setIstDescription($ist_description)
    {
        $this->container['ist_description'] = $ist_description;

        return $this;
    }

    /**
     * Gets supplier_codes
     *
     * @return string|null
     */
    public function getSupplierCodes()
    {
        return $this->container['supplier_codes'];
    }

    /**
     * Sets supplier_codes
     *
     * @param string|null $supplier_codes Kódy dodávateľov skladovej karty.
     *
     * @return self
     */
    public function setSupplierCodes($supplier_codes)
    {
        $this->container['supplier_codes'] = $supplier_codes;

        return $this;
    }

    /**
     * Gets recycle_rate_per_kg
     *
     * @return double|null
     */
    public function getRecycleRatePerKg()
    {
        return $this->container['recycle_rate_per_kg'];
    }

    /**
     * Sets recycle_rate_per_kg
     *
     * @param double|null $recycle_rate_per_kg Recyklačný poplatok - Sadzba EUR/kg.
     *
     * @return self
     */
    public function setRecycleRatePerKg($recycle_rate_per_kg)
    {
        $this->container['recycle_rate_per_kg'] = $recycle_rate_per_kg;

        return $this;
    }

    /**
     * Gets recycle_tax
     *
     * @return double|null
     */
    public function getRecycleTax()
    {
        return $this->container['recycle_tax'];
    }

    /**
     * Sets recycle_tax
     *
     * @param double|null $recycle_tax Recyklačný poplatok.
     *
     * @return self
     */
    public function setRecycleTax($recycle_tax)
    {
        $this->container['recycle_tax'] = $recycle_tax;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double|null $weight Hmotnosť hlavnej MJ v kg.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets measure_units_default_name
     *
     * @return string|null
     */
    public function getMeasureUnitsDefaultName()
    {
        return $this->container['measure_units_default_name'];
    }

    /**
     * Sets measure_units_default_name
     *
     * @param string|null $measure_units_default_name Názov hlavnej mernej jednotky.
     *
     * @return self
     */
    public function setMeasureUnitsDefaultName($measure_units_default_name)
    {
        $this->container['measure_units_default_name'] = $measure_units_default_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code Hlavný kód produktu.
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets ns_code
     *
     * @return string|null
     */
    public function getNsCode()
    {
        return $this->container['ns_code'];
    }

    /**
     * Sets ns_code
     *
     * @param string|null $ns_code Kód číselného radu.
     *
     * @return self
     */
    public function setNsCode($ns_code)
    {
        $this->container['ns_code'] = $ns_code;

        return $this;
    }

    /**
     * Gets ns_number
     *
     * @return string|null
     */
    public function getNsNumber()
    {
        return $this->container['ns_number'];
    }

    /**
     * Sets ns_number
     *
     * @param string|null $ns_number Čislo karty.
     *
     * @return self
     */
    public function setNsNumber($ns_number)
    {
        $this->container['ns_number'] = $ns_number;

        return $this;
    }

    /**
     * Gets plu
     *
     * @return int|null
     */
    public function getPlu()
    {
        return $this->container['plu'];
    }

    /**
     * Sets plu
     *
     * @param int|null $plu Plu.
     *
     * @return self
     */
    public function setPlu($plu)
    {
        $this->container['plu'] = $plu;

        return $this;
    }

    /**
     * Gets use_serial_number
     *
     * @return bool|null
     */
    public function getUseSerialNumber()
    {
        return $this->container['use_serial_number'];
    }

    /**
     * Sets use_serial_number
     *
     * @param bool|null $use_serial_number Karta s výrobnými číslami.
     *
     * @return self
     */
    public function setUseSerialNumber($use_serial_number)
    {
        $this->container['use_serial_number'] = $use_serial_number;

        return $this;
    }

    /**
     * Gets stock_item_balance
     *
     * @return \OpenAPI\Client\Model\DtoStockItemBalance[]|null
     */
    public function getStockItemBalance()
    {
        return $this->container['stock_item_balance'];
    }

    /**
     * Sets stock_item_balance
     *
     * @param \OpenAPI\Client\Model\DtoStockItemBalance[]|null $stock_item_balance Skladový zostatok karty.
     *
     * @return self
     */
    public function setStockItemBalance($stock_item_balance)
    {
        $this->container['stock_item_balance'] = $stock_item_balance;

        return $this;
    }

    /**
     * Gets stock_item_groups
     *
     * @return \OpenAPI\Client\Model\DtoStockItemGroup[]|null
     */
    public function getStockItemGroups()
    {
        return $this->container['stock_item_groups'];
    }

    /**
     * Sets stock_item_groups
     *
     * @param \OpenAPI\Client\Model\DtoStockItemGroup[]|null $stock_item_groups Skupiny skladovej karty
     *
     * @return self
     */
    public function setStockItemGroups($stock_item_groups)
    {
        $this->container['stock_item_groups'] = $stock_item_groups;

        return $this;
    }

    /**
     * Gets stock_item_params
     *
     * @return \OpenAPI\Client\Model\DtoStockItemParam[]|null
     */
    public function getStockItemParams()
    {
        return $this->container['stock_item_params'];
    }

    /**
     * Sets stock_item_params
     *
     * @param \OpenAPI\Client\Model\DtoStockItemParam[]|null $stock_item_params Parametre skladovej karty
     *
     * @return self
     */
    public function setStockItemParams($stock_item_params)
    {
        $this->container['stock_item_params'] = $stock_item_params;

        return $this;
    }

    /**
     * Gets stock_item_codes
     *
     * @return \OpenAPI\Client\Model\DtoStockItemCode[]|null
     */
    public function getStockItemCodes()
    {
        return $this->container['stock_item_codes'];
    }

    /**
     * Sets stock_item_codes
     *
     * @param \OpenAPI\Client\Model\DtoStockItemCode[]|null $stock_item_codes Kódy skladovej karty
     *
     * @return self
     */
    public function setStockItemCodes($stock_item_codes)
    {
        $this->container['stock_item_codes'] = $stock_item_codes;

        return $this;
    }

    /**
     * Gets stock_item_accessories
     *
     * @return \OpenAPI\Client\Model\DtoStockItemAndServiceAccessory[]|null
     */
    public function getStockItemAccessories()
    {
        return $this->container['stock_item_accessories'];
    }

    /**
     * Sets stock_item_accessories
     *
     * @param \OpenAPI\Client\Model\DtoStockItemAndServiceAccessory[]|null $stock_item_accessories Príslušenstvo skladovej karty
     *
     * @return self
     */
    public function setStockItemAccessories($stock_item_accessories)
    {
        $this->container['stock_item_accessories'] = $stock_item_accessories;

        return $this;
    }

    /**
     * Gets enclosures
     *
     * @return \OpenAPI\Client\Model\DtoStockItemEnclosure[]|null
     */
    public function getEnclosures()
    {
        return $this->container['enclosures'];
    }

    /**
     * Sets enclosures
     *
     * @param \OpenAPI\Client\Model\DtoStockItemEnclosure[]|null $enclosures enclosures
     *
     * @return self
     */
    public function setEnclosures($enclosures)
    {
        $this->container['enclosures'] = $enclosures;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return string|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param string|null $vat_rate Sadzba DPH
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets common_mu_amount
     *
     * @return double|null
     */
    public function getCommonMuAmount()
    {
        return $this->container['common_mu_amount'];
    }

    /**
     * Sets common_mu_amount
     *
     * @param double|null $common_mu_amount Obvykle vydávané množstvo
     *
     * @return self
     */
    public function setCommonMuAmount($common_mu_amount)
    {
        $this->container['common_mu_amount'] = $common_mu_amount;

        return $this;
    }

    /**
     * Gets date_add
     *
     * @return \DateTime|null
     */
    public function getDateAdd()
    {
        return $this->container['date_add'];
    }

    /**
     * Sets date_add
     *
     * @param \DateTime|null $date_add Dátum zaevidovania
     *
     * @return self
     */
    public function setDateAdd($date_add)
    {
        $this->container['date_add'] = $date_add;

        return $this;
    }

    /**
     * Gets date_changed
     *
     * @return \DateTime|null
     */
    public function getDateChanged()
    {
        return $this->container['date_changed'];
    }

    /**
     * Sets date_changed
     *
     * @param \DateTime|null $date_changed História - dátum zmeny skladovej karty.
     *
     * @return self
     */
    public function setDateChanged($date_changed)
    {
        $this->container['date_changed'] = $date_changed;

        return $this;
    }

    /**
     * Gets id_stock_items_group_default
     *
     * @return int|null
     */
    public function getIdStockItemsGroupDefault()
    {
        return $this->container['id_stock_items_group_default'];
    }

    /**
     * Sets id_stock_items_group_default
     *
     * @param int|null $id_stock_items_group_default Id hlavnej skupiny
     *
     * @return self
     */
    public function setIdStockItemsGroupDefault($id_stock_items_group_default)
    {
        $this->container['id_stock_items_group_default'] = $id_stock_items_group_default;

        return $this;
    }

    /**
     * Gets common_mu_name
     *
     * @return string|null
     */
    public function getCommonMuName()
    {
        return $this->container['common_mu_name'];
    }

    /**
     * Sets common_mu_name
     *
     * @param string|null $common_mu_name Obvykle vydávané množstvo - MJ
     *
     * @return self
     */
    public function setCommonMuName($common_mu_name)
    {
        $this->container['common_mu_name'] = $common_mu_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type Typ skladovej karty.  1 - Skladová karta  2 - Služba  6 - Zariadenie
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets stock_item_alternatives
     *
     * @return \OpenAPI\Client\Model\DtoStockItemAndServiceAlternative[]|null
     */
    public function getStockItemAlternatives()
    {
        return $this->container['stock_item_alternatives'];
    }

    /**
     * Sets stock_item_alternatives
     *
     * @param \OpenAPI\Client\Model\DtoStockItemAndServiceAlternative[]|null $stock_item_alternatives Alternatívy skladovej karty
     *
     * @return self
     */
    public function setStockItemAlternatives($stock_item_alternatives)
    {
        $this->container['stock_item_alternatives'] = $stock_item_alternatives;

        return $this;
    }

    /**
     * Gets product_code_type
     *
     * @return string|null
     */
    public function getProductCodeType()
    {
        return $this->container['product_code_type'];
    }

    /**
     * Sets product_code_type
     *
     * @param string|null $product_code_type Typ produktového kódu
     *
     * @return self
     */
    public function setProductCodeType($product_code_type)
    {
        $this->container['product_code_type'] = $product_code_type;

        return $this;
    }

    /**
     * Gets custom_columns
     *
     * @return \OpenAPI\Client\Model\CustomField[]|null
     */
    public function getCustomColumns()
    {
        return $this->container['custom_columns'];
    }

    /**
     * Sets custom_columns
     *
     * @param \OpenAPI\Client\Model\CustomField[]|null $custom_columns custom_columns
     *
     * @return self
     */
    public function setCustomColumns($custom_columns)
    {
        $this->container['custom_columns'] = $custom_columns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


