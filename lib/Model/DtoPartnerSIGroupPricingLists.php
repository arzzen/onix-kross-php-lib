<?php
/**
 * DtoPartnerSIGroupPricingLists
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ONIX API
 *
 * Dokumentácia ku Web API programu ONIX.  Pre testovanie s reálnymi dátami (dotazovanie servera) je potrebné zadať autorizačný token, ktorý Vám poskytla firma Kros a.s..  Pri každom dotaze je potrebné uviesť cestu ku databáze s dátami (taktiež poskytnutú firmou Kros a.s.).
 *
 * The version of the OpenAPI document: V1
 * Contact: servis.onix@kros.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DtoPartnerSIGroupPricingLists Class Doc Comment
 *
 * @category Class
 * @description DTO trieda pre individuálne ceny partnerov za skupinu kariet
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DtoPartnerSIGroupPricingLists implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DtoPartnerSIGroupPricingLists';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stock_item_group_id_record' => 'int',
        'stock_item_group_ns_number' => 'string',
        'stock_item_group_tree_level' => 'int',
        'partner_id_record' => 'int',
        'partner_ns_number' => 'string',
        'partner_reg' => 'string',
        'calculation_type' => 'int',
        'calculation_type_pricing_list_id_record' => 'int',
        'calculation_type_pricing_list_code' => 'string',
        'calculation_type_percentage' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stock_item_group_id_record' => 'int64',
        'stock_item_group_ns_number' => null,
        'stock_item_group_tree_level' => 'int32',
        'partner_id_record' => 'int64',
        'partner_ns_number' => null,
        'partner_reg' => null,
        'calculation_type' => 'int32',
        'calculation_type_pricing_list_id_record' => 'int64',
        'calculation_type_pricing_list_code' => null,
        'calculation_type_percentage' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stock_item_group_id_record' => 'StockItemGroup_IdRecord',
        'stock_item_group_ns_number' => 'StockItemGroup_Ns_Number',
        'stock_item_group_tree_level' => 'StockItemGroup_TreeLevel',
        'partner_id_record' => 'Partner_IdRecord',
        'partner_ns_number' => 'Partner_Ns_Number',
        'partner_reg' => 'Partner_Reg',
        'calculation_type' => 'CalculationType',
        'calculation_type_pricing_list_id_record' => 'CalculationType_PricingList_IdRecord',
        'calculation_type_pricing_list_code' => 'CalculationType_PricingList_Code',
        'calculation_type_percentage' => 'CalculationType_Percentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stock_item_group_id_record' => 'setStockItemGroupIdRecord',
        'stock_item_group_ns_number' => 'setStockItemGroupNsNumber',
        'stock_item_group_tree_level' => 'setStockItemGroupTreeLevel',
        'partner_id_record' => 'setPartnerIdRecord',
        'partner_ns_number' => 'setPartnerNsNumber',
        'partner_reg' => 'setPartnerReg',
        'calculation_type' => 'setCalculationType',
        'calculation_type_pricing_list_id_record' => 'setCalculationTypePricingListIdRecord',
        'calculation_type_pricing_list_code' => 'setCalculationTypePricingListCode',
        'calculation_type_percentage' => 'setCalculationTypePercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stock_item_group_id_record' => 'getStockItemGroupIdRecord',
        'stock_item_group_ns_number' => 'getStockItemGroupNsNumber',
        'stock_item_group_tree_level' => 'getStockItemGroupTreeLevel',
        'partner_id_record' => 'getPartnerIdRecord',
        'partner_ns_number' => 'getPartnerNsNumber',
        'partner_reg' => 'getPartnerReg',
        'calculation_type' => 'getCalculationType',
        'calculation_type_pricing_list_id_record' => 'getCalculationTypePricingListIdRecord',
        'calculation_type_pricing_list_code' => 'getCalculationTypePricingListCode',
        'calculation_type_percentage' => 'getCalculationTypePercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stock_item_group_id_record'] = $data['stock_item_group_id_record'] ?? null;
        $this->container['stock_item_group_ns_number'] = $data['stock_item_group_ns_number'] ?? null;
        $this->container['stock_item_group_tree_level'] = $data['stock_item_group_tree_level'] ?? null;
        $this->container['partner_id_record'] = $data['partner_id_record'] ?? null;
        $this->container['partner_ns_number'] = $data['partner_ns_number'] ?? null;
        $this->container['partner_reg'] = $data['partner_reg'] ?? null;
        $this->container['calculation_type'] = $data['calculation_type'] ?? null;
        $this->container['calculation_type_pricing_list_id_record'] = $data['calculation_type_pricing_list_id_record'] ?? null;
        $this->container['calculation_type_pricing_list_code'] = $data['calculation_type_pricing_list_code'] ?? null;
        $this->container['calculation_type_percentage'] = $data['calculation_type_percentage'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stock_item_group_id_record
     *
     * @return int|null
     */
    public function getStockItemGroupIdRecord()
    {
        return $this->container['stock_item_group_id_record'];
    }

    /**
     * Sets stock_item_group_id_record
     *
     * @param int|null $stock_item_group_id_record ID skupiny skladovej karty
     *
     * @return self
     */
    public function setStockItemGroupIdRecord($stock_item_group_id_record)
    {
        $this->container['stock_item_group_id_record'] = $stock_item_group_id_record;

        return $this;
    }

    /**
     * Gets stock_item_group_ns_number
     *
     * @return string|null
     */
    public function getStockItemGroupNsNumber()
    {
        return $this->container['stock_item_group_ns_number'];
    }

    /**
     * Sets stock_item_group_ns_number
     *
     * @param string|null $stock_item_group_ns_number Číslo skupiny skladovej karty
     *
     * @return self
     */
    public function setStockItemGroupNsNumber($stock_item_group_ns_number)
    {
        $this->container['stock_item_group_ns_number'] = $stock_item_group_ns_number;

        return $this;
    }

    /**
     * Gets stock_item_group_tree_level
     *
     * @return int|null
     */
    public function getStockItemGroupTreeLevel()
    {
        return $this->container['stock_item_group_tree_level'];
    }

    /**
     * Sets stock_item_group_tree_level
     *
     * @param int|null $stock_item_group_tree_level Určuje prioritu cenníka (čím vyššie číslo, tým vyššiu prioritu má cenník)
     *
     * @return self
     */
    public function setStockItemGroupTreeLevel($stock_item_group_tree_level)
    {
        $this->container['stock_item_group_tree_level'] = $stock_item_group_tree_level;

        return $this;
    }

    /**
     * Gets partner_id_record
     *
     * @return int|null
     */
    public function getPartnerIdRecord()
    {
        return $this->container['partner_id_record'];
    }

    /**
     * Sets partner_id_record
     *
     * @param int|null $partner_id_record Id partnera
     *
     * @return self
     */
    public function setPartnerIdRecord($partner_id_record)
    {
        $this->container['partner_id_record'] = $partner_id_record;

        return $this;
    }

    /**
     * Gets partner_ns_number
     *
     * @return string|null
     */
    public function getPartnerNsNumber()
    {
        return $this->container['partner_ns_number'];
    }

    /**
     * Sets partner_ns_number
     *
     * @param string|null $partner_ns_number Číslo partnera
     *
     * @return self
     */
    public function setPartnerNsNumber($partner_ns_number)
    {
        $this->container['partner_ns_number'] = $partner_ns_number;

        return $this;
    }

    /**
     * Gets partner_reg
     *
     * @return string|null
     */
    public function getPartnerReg()
    {
        return $this->container['partner_reg'];
    }

    /**
     * Sets partner_reg
     *
     * @param string|null $partner_reg IČO partnera
     *
     * @return self
     */
    public function setPartnerReg($partner_reg)
    {
        $this->container['partner_reg'] = $partner_reg;

        return $this;
    }

    /**
     * Gets calculation_type
     *
     * @return int|null
     */
    public function getCalculationType()
    {
        return $this->container['calculation_type'];
    }

    /**
     * Sets calculation_type
     *
     * @param int|null $calculation_type Spôsob výpočtu ceny  1 - Fixná cena  2 - Manažérska cena + marža  3 - Skladová cena + marža  4 - Cena z iného cenníka - zľava
     *
     * @return self
     */
    public function setCalculationType($calculation_type)
    {
        $this->container['calculation_type'] = $calculation_type;

        return $this;
    }

    /**
     * Gets calculation_type_pricing_list_id_record
     *
     * @return int|null
     */
    public function getCalculationTypePricingListIdRecord()
    {
        return $this->container['calculation_type_pricing_list_id_record'];
    }

    /**
     * Sets calculation_type_pricing_list_id_record
     *
     * @param int|null $calculation_type_pricing_list_id_record Id cenníka
     *
     * @return self
     */
    public function setCalculationTypePricingListIdRecord($calculation_type_pricing_list_id_record)
    {
        $this->container['calculation_type_pricing_list_id_record'] = $calculation_type_pricing_list_id_record;

        return $this;
    }

    /**
     * Gets calculation_type_pricing_list_code
     *
     * @return string|null
     */
    public function getCalculationTypePricingListCode()
    {
        return $this->container['calculation_type_pricing_list_code'];
    }

    /**
     * Sets calculation_type_pricing_list_code
     *
     * @param string|null $calculation_type_pricing_list_code Kód cenníka
     *
     * @return self
     */
    public function setCalculationTypePricingListCode($calculation_type_pricing_list_code)
    {
        $this->container['calculation_type_pricing_list_code'] = $calculation_type_pricing_list_code;

        return $this;
    }

    /**
     * Gets calculation_type_percentage
     *
     * @return double|null
     */
    public function getCalculationTypePercentage()
    {
        return $this->container['calculation_type_percentage'];
    }

    /**
     * Sets calculation_type_percentage
     *
     * @param double|null $calculation_type_percentage Zľava alebo marža (%)
     *
     * @return self
     */
    public function setCalculationTypePercentage($calculation_type_percentage)
    {
        $this->container['calculation_type_percentage'] = $calculation_type_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


