<?php
/**
 * DtoPartnersGet
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ONIX API
 *
 * Dokumentácia ku Web API programu ONIX.  Pre testovanie s reálnymi dátami (dotazovanie servera) je potrebné zadať autorizačný token, ktorý Vám poskytla firma Kros a.s..  Pri každom dotaze je potrebné uviesť cestu ku databáze s dátami (taktiež poskytnutú firmou Kros a.s.).
 *
 * The version of the OpenAPI document: V1
 * Contact: servis.onix@kros.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DtoPartnersGet Class Doc Comment
 *
 * @category Class
 * @description DTO trieda pre partnera.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DtoPartnersGet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DtoPartners_get';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_record' => 'int',
        'addresses' => '\OpenAPI\Client\Model\DtoPartnerAddress[]',
        'bank_accounts' => '\OpenAPI\Client\Model\DtoPartnerBankAccount[]',
        'contacts' => '\OpenAPI\Client\Model\DtoPartnerContact[]',
        'name' => 'string',
        'description' => 'string',
        'ns_number' => 'string',
        'reg' => 'string',
        'tax' => 'string',
        'date_changed' => '\DateTime',
        'maturity_sendedinvoices' => 'int',
        'maturity_receivedinvoices' => 'int',
        'center' => 'string',
        'department' => 'string',
        'transport_type' => 'string',
        'payment_type' => 'string',
        'guid_ext' => 'string',
        'credit_settings' => 'int',
        'credit_value' => 'double',
        'credit_unpayer' => 'int',
        'partner_type' => 'int',
        'vat_no' => 'string',
        'custom_columns' => '\OpenAPI\Client\Model\CustomField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_record' => 'int64',
        'addresses' => null,
        'bank_accounts' => null,
        'contacts' => null,
        'name' => null,
        'description' => null,
        'ns_number' => null,
        'reg' => null,
        'tax' => null,
        'date_changed' => 'date-time',
        'maturity_sendedinvoices' => 'int32',
        'maturity_receivedinvoices' => 'int32',
        'center' => null,
        'department' => null,
        'transport_type' => null,
        'payment_type' => null,
        'guid_ext' => null,
        'credit_settings' => 'int32',
        'credit_value' => 'double',
        'credit_unpayer' => 'int32',
        'partner_type' => 'int32',
        'vat_no' => null,
        'custom_columns' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_record' => 'IdRecord',
        'addresses' => 'Addresses',
        'bank_accounts' => 'BankAccounts',
        'contacts' => 'Contacts',
        'name' => 'Name',
        'description' => 'Description',
        'ns_number' => 'Ns_Number',
        'reg' => 'Reg',
        'tax' => 'Tax',
        'date_changed' => 'Date_Changed',
        'maturity_sendedinvoices' => 'Maturity_Sendedinvoices',
        'maturity_receivedinvoices' => 'Maturity_Receivedinvoices',
        'center' => 'Center',
        'department' => 'Department',
        'transport_type' => 'Transport_Type',
        'payment_type' => 'Payment_Type',
        'guid_ext' => 'Guid_Ext',
        'credit_settings' => 'Credit_Settings',
        'credit_value' => 'Credit_Value',
        'credit_unpayer' => 'Credit_Unpayer',
        'partner_type' => 'Partner_Type',
        'vat_no' => 'Vat_No',
        'custom_columns' => 'CustomColumns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_record' => 'setIdRecord',
        'addresses' => 'setAddresses',
        'bank_accounts' => 'setBankAccounts',
        'contacts' => 'setContacts',
        'name' => 'setName',
        'description' => 'setDescription',
        'ns_number' => 'setNsNumber',
        'reg' => 'setReg',
        'tax' => 'setTax',
        'date_changed' => 'setDateChanged',
        'maturity_sendedinvoices' => 'setMaturitySendedinvoices',
        'maturity_receivedinvoices' => 'setMaturityReceivedinvoices',
        'center' => 'setCenter',
        'department' => 'setDepartment',
        'transport_type' => 'setTransportType',
        'payment_type' => 'setPaymentType',
        'guid_ext' => 'setGuidExt',
        'credit_settings' => 'setCreditSettings',
        'credit_value' => 'setCreditValue',
        'credit_unpayer' => 'setCreditUnpayer',
        'partner_type' => 'setPartnerType',
        'vat_no' => 'setVatNo',
        'custom_columns' => 'setCustomColumns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_record' => 'getIdRecord',
        'addresses' => 'getAddresses',
        'bank_accounts' => 'getBankAccounts',
        'contacts' => 'getContacts',
        'name' => 'getName',
        'description' => 'getDescription',
        'ns_number' => 'getNsNumber',
        'reg' => 'getReg',
        'tax' => 'getTax',
        'date_changed' => 'getDateChanged',
        'maturity_sendedinvoices' => 'getMaturitySendedinvoices',
        'maturity_receivedinvoices' => 'getMaturityReceivedinvoices',
        'center' => 'getCenter',
        'department' => 'getDepartment',
        'transport_type' => 'getTransportType',
        'payment_type' => 'getPaymentType',
        'guid_ext' => 'getGuidExt',
        'credit_settings' => 'getCreditSettings',
        'credit_value' => 'getCreditValue',
        'credit_unpayer' => 'getCreditUnpayer',
        'partner_type' => 'getPartnerType',
        'vat_no' => 'getVatNo',
        'custom_columns' => 'getCustomColumns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CREDIT_SETTINGS_0 = 0;
    const CREDIT_SETTINGS_1 = 1;
    const CREDIT_SETTINGS_2 = 2;
    const PARTNER_TYPE_MINUS_2 = -2;
    const PARTNER_TYPE_1 = 1;
    const PARTNER_TYPE_2 = 2;
    const PARTNER_TYPE_0 = 0;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreditSettingsAllowableValues()
    {
        return [
            self::CREDIT_SETTINGS_0,
            self::CREDIT_SETTINGS_1,
            self::CREDIT_SETTINGS_2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartnerTypeAllowableValues()
    {
        return [
            self::PARTNER_TYPE_MINUS_2,
            self::PARTNER_TYPE_1,
            self::PARTNER_TYPE_2,
            self::PARTNER_TYPE_0,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_record'] = $data['id_record'] ?? null;
        $this->container['addresses'] = $data['addresses'] ?? null;
        $this->container['bank_accounts'] = $data['bank_accounts'] ?? null;
        $this->container['contacts'] = $data['contacts'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['ns_number'] = $data['ns_number'] ?? null;
        $this->container['reg'] = $data['reg'] ?? null;
        $this->container['tax'] = $data['tax'] ?? null;
        $this->container['date_changed'] = $data['date_changed'] ?? null;
        $this->container['maturity_sendedinvoices'] = $data['maturity_sendedinvoices'] ?? null;
        $this->container['maturity_receivedinvoices'] = $data['maturity_receivedinvoices'] ?? null;
        $this->container['center'] = $data['center'] ?? null;
        $this->container['department'] = $data['department'] ?? null;
        $this->container['transport_type'] = $data['transport_type'] ?? null;
        $this->container['payment_type'] = $data['payment_type'] ?? null;
        $this->container['guid_ext'] = $data['guid_ext'] ?? null;
        $this->container['credit_settings'] = $data['credit_settings'] ?? null;
        $this->container['credit_value'] = $data['credit_value'] ?? null;
        $this->container['credit_unpayer'] = $data['credit_unpayer'] ?? null;
        $this->container['partner_type'] = $data['partner_type'] ?? null;
        $this->container['vat_no'] = $data['vat_no'] ?? null;
        $this->container['custom_columns'] = $data['custom_columns'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCreditSettingsAllowableValues();
        if (!is_null($this->container['credit_settings']) && !in_array($this->container['credit_settings'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'credit_settings', must be one of '%s'",
                $this->container['credit_settings'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPartnerTypeAllowableValues();
        if (!is_null($this->container['partner_type']) && !in_array($this->container['partner_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partner_type', must be one of '%s'",
                $this->container['partner_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_record
     *
     * @return int|null
     */
    public function getIdRecord()
    {
        return $this->container['id_record'];
    }

    /**
     * Sets id_record
     *
     * @param int|null $id_record ID záznamu
     *
     * @return self
     */
    public function setIdRecord($id_record)
    {
        $this->container['id_record'] = $id_record;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenAPI\Client\Model\DtoPartnerAddress[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenAPI\Client\Model\DtoPartnerAddress[]|null $addresses Zoznam adries partnera.
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets bank_accounts
     *
     * @return \OpenAPI\Client\Model\DtoPartnerBankAccount[]|null
     */
    public function getBankAccounts()
    {
        return $this->container['bank_accounts'];
    }

    /**
     * Sets bank_accounts
     *
     * @param \OpenAPI\Client\Model\DtoPartnerBankAccount[]|null $bank_accounts Zoznam bankových účtov partnera.
     *
     * @return self
     */
    public function setBankAccounts($bank_accounts)
    {
        $this->container['bank_accounts'] = $bank_accounts;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \OpenAPI\Client\Model\DtoPartnerContact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \OpenAPI\Client\Model\DtoPartnerContact[]|null $contacts Zoznam kontaktov partnera.
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Názov partnera.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Poznámka.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ns_number
     *
     * @return string|null
     */
    public function getNsNumber()
    {
        return $this->container['ns_number'];
    }

    /**
     * Sets ns_number
     *
     * @param string|null $ns_number Číslo partnera.
     *
     * @return self
     */
    public function setNsNumber($ns_number)
    {
        $this->container['ns_number'] = $ns_number;

        return $this;
    }

    /**
     * Gets reg
     *
     * @return string|null
     */
    public function getReg()
    {
        return $this->container['reg'];
    }

    /**
     * Sets reg
     *
     * @param string|null $reg IČO.
     *
     * @return self
     */
    public function setReg($reg)
    {
        $this->container['reg'] = $reg;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string|null $tax DIČ.
     *
     * @return self
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets date_changed
     *
     * @return \DateTime|null
     */
    public function getDateChanged()
    {
        return $this->container['date_changed'];
    }

    /**
     * Sets date_changed
     *
     * @param \DateTime|null $date_changed História - dátum zmeny partnera.
     *
     * @return self
     */
    public function setDateChanged($date_changed)
    {
        $this->container['date_changed'] = $date_changed;

        return $this;
    }

    /**
     * Gets maturity_sendedinvoices
     *
     * @return int|null
     */
    public function getMaturitySendedinvoices()
    {
        return $this->container['maturity_sendedinvoices'];
    }

    /**
     * Sets maturity_sendedinvoices
     *
     * @param int|null $maturity_sendedinvoices Splatnosť odoslaných dokladov.
     *
     * @return self
     */
    public function setMaturitySendedinvoices($maturity_sendedinvoices)
    {
        $this->container['maturity_sendedinvoices'] = $maturity_sendedinvoices;

        return $this;
    }

    /**
     * Gets maturity_receivedinvoices
     *
     * @return int|null
     */
    public function getMaturityReceivedinvoices()
    {
        return $this->container['maturity_receivedinvoices'];
    }

    /**
     * Sets maturity_receivedinvoices
     *
     * @param int|null $maturity_receivedinvoices Splatnosť prijatých dokladov.
     *
     * @return self
     */
    public function setMaturityReceivedinvoices($maturity_receivedinvoices)
    {
        $this->container['maturity_receivedinvoices'] = $maturity_receivedinvoices;

        return $this;
    }

    /**
     * Gets center
     *
     * @return string|null
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     *
     * @param string|null $center Stredisko.
     *
     * @return self
     */
    public function setCenter($center)
    {
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Prevádzka.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string|null
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string|null $transport_type Spôsob dopravy.
     *
     * @return self
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type Forma úhrady.
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets guid_ext
     *
     * @return string|null
     */
    public function getGuidExt()
    {
        return $this->container['guid_ext'];
    }

    /**
     * Sets guid_ext
     *
     * @param string|null $guid_ext Klúč záznamu v externom SW.
     *
     * @return self
     */
    public function setGuidExt($guid_ext)
    {
        $this->container['guid_ext'] = $guid_ext;

        return $this;
    }

    /**
     * Gets credit_settings
     *
     * @return int|null
     */
    public function getCreditSettings()
    {
        return $this->container['credit_settings'];
    }

    /**
     * Sets credit_settings
     *
     * @param int|null $credit_settings Nastavenie fakturačného kreditu.  0 - Vypnuté,  1 - Povoliť - iba upozornenie,  2 - Zakázať - tvrdá validácia.
     *
     * @return self
     */
    public function setCreditSettings($credit_settings)
    {
        $allowedValues = $this->getCreditSettingsAllowableValues();
        if (!is_null($credit_settings) && !in_array($credit_settings, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'credit_settings', must be one of '%s'",
                    $credit_settings,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credit_settings'] = $credit_settings;

        return $this;
    }

    /**
     * Gets credit_value
     *
     * @return double|null
     */
    public function getCreditValue()
    {
        return $this->container['credit_value'];
    }

    /**
     * Sets credit_value
     *
     * @param double|null $credit_value Suma fakturačného kreditu.
     *
     * @return self
     */
    public function setCreditValue($credit_value)
    {
        $this->container['credit_value'] = $credit_value;

        return $this;
    }

    /**
     * Gets credit_unpayer
     *
     * @return int|null
     */
    public function getCreditUnpayer()
    {
        return $this->container['credit_unpayer'];
    }

    /**
     * Sets credit_unpayer
     *
     * @param int|null $credit_unpayer Zakázať fakturáciu, ak je neplatič.  -1 - Zakázať,  0 - Povoliť.
     *
     * @return self
     */
    public function setCreditUnpayer($credit_unpayer)
    {
        $this->container['credit_unpayer'] = $credit_unpayer;

        return $this;
    }

    /**
     * Gets partner_type
     *
     * @return int|null
     */
    public function getPartnerType()
    {
        return $this->container['partner_type'];
    }

    /**
     * Sets partner_type
     *
     * @param int|null $partner_type Typ partnera na doklade.  Občan = -2  Podnikateľ - fyzická osoba = 1  Podnikateľ - právnická osoba = 2  Ostatné = 0
     *
     * @return self
     */
    public function setPartnerType($partner_type)
    {
        $allowedValues = $this->getPartnerTypeAllowableValues();
        if (!is_null($partner_type) && !in_array($partner_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partner_type', must be one of '%s'",
                    $partner_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partner_type'] = $partner_type;

        return $this;
    }

    /**
     * Gets vat_no
     *
     * @return string|null
     */
    public function getVatNo()
    {
        return $this->container['vat_no'];
    }

    /**
     * Sets vat_no
     *
     * @param string|null $vat_no IČ DPH.
     *
     * @return self
     */
    public function setVatNo($vat_no)
    {
        $this->container['vat_no'] = $vat_no;

        return $this;
    }

    /**
     * Gets custom_columns
     *
     * @return \OpenAPI\Client\Model\CustomField[]|null
     */
    public function getCustomColumns()
    {
        return $this->container['custom_columns'];
    }

    /**
     * Sets custom_columns
     *
     * @param \OpenAPI\Client\Model\CustomField[]|null $custom_columns custom_columns
     *
     * @return self
     */
    public function setCustomColumns($custom_columns)
    {
        $this->container['custom_columns'] = $custom_columns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


