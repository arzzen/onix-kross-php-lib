<?php
/**
 * DtoDocumentItemPost
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ONIX API
 *
 * Dokumentácia ku Web API programu ONIX.  Pre testovanie s reálnymi dátami (dotazovanie servera) je potrebné zadať autorizačný token, ktorý Vám poskytla firma Kros a.s..  Pri každom dotaze je potrebné uviesť cestu ku databáze s dátami (taktiež poskytnutú firmou Kros a.s.).
 *
 * The version of the OpenAPI document: V1
 * Contact: servis.onix@kros.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DtoDocumentItemPost Class Doc Comment
 *
 * @category Class
 * @description DTO trieda pre položku dokladu.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DtoDocumentItemPost implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DtoDocumentItem_post';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'record_external_identificator' => 'string',
        'stock_items_name' => 'string',
        'stock_name' => 'string',
        'plu' => 'int',
        'date_manufacture' => '\DateTime',
        'date_expiration' => '\DateTime',
        'serial_number' => 'string',
        'user_amount' => 'double',
        'description' => 'string',
        'date_expiration_for_buyer' => '\DateTime',
        'value_name_1' => 'string',
        'value_name_2' => 'string',
        'value_name_3' => 'string',
        'value_name_4' => 'string',
        'value_name_5' => 'string',
        'value_name_6' => 'string',
        'item_type' => 'int',
        'unit_price_rounding_type' => 'int',
        'unit_price_rounding_number' => 'int',
        'sum_rounding_type' => 'int',
        'sum_rounding_number' => 'int',
        'measure_unit' => 'string',
        'date_reservation' => '\DateTime',
        'reservated_amount' => 'double',
        'stock_item_code' => 'string',
        'product_code_type' => 'string',
        'account_md_syn' => 'string',
        'account_md_anl' => 'string',
        'account_dal_syn' => 'string',
        'account_dal_anl' => 'string',
        'ist_code' => 'string',
        'stock_items_ns_number' => 'string',
        'stock_code' => 'string',
        'ia_name_1' => 'string',
        'ia_name_2' => 'string',
        'ia_name_3' => 'string',
        'ia_name_4' => 'string',
        'ia_name_5' => 'string',
        'ia_name_6' => 'string',
        'ia_code_1' => 'string',
        'ia_code_2' => 'string',
        'ia_code_3' => 'string',
        'ia_code_4' => 'string',
        'ia_code_5' => 'string',
        'ia_code_6' => 'string',
        'item_name' => 'string',
        'unit_price_base' => 'double',
        'unit_price_base_vat' => 'double',
        'unit_discount_percent' => 'double',
        'unit_discount' => 'double',
        'unit_discount_vat' => 'double',
        'unit_price' => 'double',
        'unit_price_vat' => 'double',
        'sum' => 'double',
        'sum_vat' => 'double',
        'price_manager' => 'double',
        'vat_rate_sys_code' => 'string',
        'real_accounting_balance' => 'double',
        'stock_item_weight' => 'double',
        'custom_columns' => '\OpenAPI\Client\Model\CustomField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'record_external_identificator' => null,
        'stock_items_name' => null,
        'stock_name' => null,
        'plu' => 'int64',
        'date_manufacture' => 'date-time',
        'date_expiration' => 'date-time',
        'serial_number' => null,
        'user_amount' => 'double',
        'description' => null,
        'date_expiration_for_buyer' => 'date-time',
        'value_name_1' => null,
        'value_name_2' => null,
        'value_name_3' => null,
        'value_name_4' => null,
        'value_name_5' => null,
        'value_name_6' => null,
        'item_type' => 'int32',
        'unit_price_rounding_type' => 'int32',
        'unit_price_rounding_number' => 'int32',
        'sum_rounding_type' => 'int32',
        'sum_rounding_number' => 'int32',
        'measure_unit' => null,
        'date_reservation' => 'date-time',
        'reservated_amount' => 'double',
        'stock_item_code' => null,
        'product_code_type' => null,
        'account_md_syn' => null,
        'account_md_anl' => null,
        'account_dal_syn' => null,
        'account_dal_anl' => null,
        'ist_code' => null,
        'stock_items_ns_number' => null,
        'stock_code' => null,
        'ia_name_1' => null,
        'ia_name_2' => null,
        'ia_name_3' => null,
        'ia_name_4' => null,
        'ia_name_5' => null,
        'ia_name_6' => null,
        'ia_code_1' => null,
        'ia_code_2' => null,
        'ia_code_3' => null,
        'ia_code_4' => null,
        'ia_code_5' => null,
        'ia_code_6' => null,
        'item_name' => null,
        'unit_price_base' => 'double',
        'unit_price_base_vat' => 'double',
        'unit_discount_percent' => 'double',
        'unit_discount' => 'double',
        'unit_discount_vat' => 'double',
        'unit_price' => 'double',
        'unit_price_vat' => 'double',
        'sum' => 'double',
        'sum_vat' => 'double',
        'price_manager' => 'double',
        'vat_rate_sys_code' => null,
        'real_accounting_balance' => 'double',
        'stock_item_weight' => 'double',
        'custom_columns' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'record_external_identificator' => 'RecordExternalIdentificator',
        'stock_items_name' => 'Stock_Items_Name',
        'stock_name' => 'Stock_Name',
        'plu' => 'Plu',
        'date_manufacture' => 'Date_Manufacture',
        'date_expiration' => 'Date_Expiration',
        'serial_number' => 'Serial_Number',
        'user_amount' => 'User_Amount',
        'description' => 'Description',
        'date_expiration_for_buyer' => 'Date_Expiration_For_Buyer',
        'value_name_1' => 'Value_Name_1',
        'value_name_2' => 'Value_Name_2',
        'value_name_3' => 'Value_Name_3',
        'value_name_4' => 'Value_Name_4',
        'value_name_5' => 'Value_Name_5',
        'value_name_6' => 'Value_Name_6',
        'item_type' => 'Item_Type',
        'unit_price_rounding_type' => 'Unit_Price_Rounding_Type',
        'unit_price_rounding_number' => 'Unit_Price_Rounding_Number',
        'sum_rounding_type' => 'Sum_Rounding_Type',
        'sum_rounding_number' => 'Sum_Rounding_Number',
        'measure_unit' => 'Measure_Unit',
        'date_reservation' => 'Date_Reservation',
        'reservated_amount' => 'Reservated_Amount',
        'stock_item_code' => 'Stock_Item_Code',
        'product_code_type' => 'Product_Code_Type',
        'account_md_syn' => 'Account_Md_Syn',
        'account_md_anl' => 'Account_Md_Anl',
        'account_dal_syn' => 'Account_Dal_Syn',
        'account_dal_anl' => 'Account_Dal_Anl',
        'ist_code' => 'Ist_Code',
        'stock_items_ns_number' => 'Stock_Items_Ns_Number',
        'stock_code' => 'Stock_Code',
        'ia_name_1' => 'Ia_Name_1',
        'ia_name_2' => 'Ia_Name_2',
        'ia_name_3' => 'Ia_Name_3',
        'ia_name_4' => 'Ia_Name_4',
        'ia_name_5' => 'Ia_Name_5',
        'ia_name_6' => 'Ia_Name_6',
        'ia_code_1' => 'Ia_Code_1',
        'ia_code_2' => 'Ia_Code_2',
        'ia_code_3' => 'Ia_Code_3',
        'ia_code_4' => 'Ia_Code_4',
        'ia_code_5' => 'Ia_Code_5',
        'ia_code_6' => 'Ia_Code_6',
        'item_name' => 'Item_Name',
        'unit_price_base' => 'Unit_Price_Base',
        'unit_price_base_vat' => 'Unit_Price_Base_Vat',
        'unit_discount_percent' => 'Unit_Discount_Percent',
        'unit_discount' => 'Unit_Discount',
        'unit_discount_vat' => 'Unit_Discount_Vat',
        'unit_price' => 'Unit_Price',
        'unit_price_vat' => 'Unit_Price_Vat',
        'sum' => 'Sum',
        'sum_vat' => 'Sum_Vat',
        'price_manager' => 'Price_Manager',
        'vat_rate_sys_code' => 'Vat_Rate_SysCode',
        'real_accounting_balance' => 'Real_Accounting_Balance',
        'stock_item_weight' => 'Stock_Item_Weight',
        'custom_columns' => 'CustomColumns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'record_external_identificator' => 'setRecordExternalIdentificator',
        'stock_items_name' => 'setStockItemsName',
        'stock_name' => 'setStockName',
        'plu' => 'setPlu',
        'date_manufacture' => 'setDateManufacture',
        'date_expiration' => 'setDateExpiration',
        'serial_number' => 'setSerialNumber',
        'user_amount' => 'setUserAmount',
        'description' => 'setDescription',
        'date_expiration_for_buyer' => 'setDateExpirationForBuyer',
        'value_name_1' => 'setValueName1',
        'value_name_2' => 'setValueName2',
        'value_name_3' => 'setValueName3',
        'value_name_4' => 'setValueName4',
        'value_name_5' => 'setValueName5',
        'value_name_6' => 'setValueName6',
        'item_type' => 'setItemType',
        'unit_price_rounding_type' => 'setUnitPriceRoundingType',
        'unit_price_rounding_number' => 'setUnitPriceRoundingNumber',
        'sum_rounding_type' => 'setSumRoundingType',
        'sum_rounding_number' => 'setSumRoundingNumber',
        'measure_unit' => 'setMeasureUnit',
        'date_reservation' => 'setDateReservation',
        'reservated_amount' => 'setReservatedAmount',
        'stock_item_code' => 'setStockItemCode',
        'product_code_type' => 'setProductCodeType',
        'account_md_syn' => 'setAccountMdSyn',
        'account_md_anl' => 'setAccountMdAnl',
        'account_dal_syn' => 'setAccountDalSyn',
        'account_dal_anl' => 'setAccountDalAnl',
        'ist_code' => 'setIstCode',
        'stock_items_ns_number' => 'setStockItemsNsNumber',
        'stock_code' => 'setStockCode',
        'ia_name_1' => 'setIaName1',
        'ia_name_2' => 'setIaName2',
        'ia_name_3' => 'setIaName3',
        'ia_name_4' => 'setIaName4',
        'ia_name_5' => 'setIaName5',
        'ia_name_6' => 'setIaName6',
        'ia_code_1' => 'setIaCode1',
        'ia_code_2' => 'setIaCode2',
        'ia_code_3' => 'setIaCode3',
        'ia_code_4' => 'setIaCode4',
        'ia_code_5' => 'setIaCode5',
        'ia_code_6' => 'setIaCode6',
        'item_name' => 'setItemName',
        'unit_price_base' => 'setUnitPriceBase',
        'unit_price_base_vat' => 'setUnitPriceBaseVat',
        'unit_discount_percent' => 'setUnitDiscountPercent',
        'unit_discount' => 'setUnitDiscount',
        'unit_discount_vat' => 'setUnitDiscountVat',
        'unit_price' => 'setUnitPrice',
        'unit_price_vat' => 'setUnitPriceVat',
        'sum' => 'setSum',
        'sum_vat' => 'setSumVat',
        'price_manager' => 'setPriceManager',
        'vat_rate_sys_code' => 'setVatRateSysCode',
        'real_accounting_balance' => 'setRealAccountingBalance',
        'stock_item_weight' => 'setStockItemWeight',
        'custom_columns' => 'setCustomColumns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'record_external_identificator' => 'getRecordExternalIdentificator',
        'stock_items_name' => 'getStockItemsName',
        'stock_name' => 'getStockName',
        'plu' => 'getPlu',
        'date_manufacture' => 'getDateManufacture',
        'date_expiration' => 'getDateExpiration',
        'serial_number' => 'getSerialNumber',
        'user_amount' => 'getUserAmount',
        'description' => 'getDescription',
        'date_expiration_for_buyer' => 'getDateExpirationForBuyer',
        'value_name_1' => 'getValueName1',
        'value_name_2' => 'getValueName2',
        'value_name_3' => 'getValueName3',
        'value_name_4' => 'getValueName4',
        'value_name_5' => 'getValueName5',
        'value_name_6' => 'getValueName6',
        'item_type' => 'getItemType',
        'unit_price_rounding_type' => 'getUnitPriceRoundingType',
        'unit_price_rounding_number' => 'getUnitPriceRoundingNumber',
        'sum_rounding_type' => 'getSumRoundingType',
        'sum_rounding_number' => 'getSumRoundingNumber',
        'measure_unit' => 'getMeasureUnit',
        'date_reservation' => 'getDateReservation',
        'reservated_amount' => 'getReservatedAmount',
        'stock_item_code' => 'getStockItemCode',
        'product_code_type' => 'getProductCodeType',
        'account_md_syn' => 'getAccountMdSyn',
        'account_md_anl' => 'getAccountMdAnl',
        'account_dal_syn' => 'getAccountDalSyn',
        'account_dal_anl' => 'getAccountDalAnl',
        'ist_code' => 'getIstCode',
        'stock_items_ns_number' => 'getStockItemsNsNumber',
        'stock_code' => 'getStockCode',
        'ia_name_1' => 'getIaName1',
        'ia_name_2' => 'getIaName2',
        'ia_name_3' => 'getIaName3',
        'ia_name_4' => 'getIaName4',
        'ia_name_5' => 'getIaName5',
        'ia_name_6' => 'getIaName6',
        'ia_code_1' => 'getIaCode1',
        'ia_code_2' => 'getIaCode2',
        'ia_code_3' => 'getIaCode3',
        'ia_code_4' => 'getIaCode4',
        'ia_code_5' => 'getIaCode5',
        'ia_code_6' => 'getIaCode6',
        'item_name' => 'getItemName',
        'unit_price_base' => 'getUnitPriceBase',
        'unit_price_base_vat' => 'getUnitPriceBaseVat',
        'unit_discount_percent' => 'getUnitDiscountPercent',
        'unit_discount' => 'getUnitDiscount',
        'unit_discount_vat' => 'getUnitDiscountVat',
        'unit_price' => 'getUnitPrice',
        'unit_price_vat' => 'getUnitPriceVat',
        'sum' => 'getSum',
        'sum_vat' => 'getSumVat',
        'price_manager' => 'getPriceManager',
        'vat_rate_sys_code' => 'getVatRateSysCode',
        'real_accounting_balance' => 'getRealAccountingBalance',
        'stock_item_weight' => 'getStockItemWeight',
        'custom_columns' => 'getCustomColumns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ITEM_TYPE_0 = 0;
    const ITEM_TYPE_1 = 1;
    const ITEM_TYPE_2 = 2;
    const ITEM_TYPE_5 = 5;
    const ITEM_TYPE_6 = 6;
    const UNIT_PRICE_ROUNDING_TYPE_0 = 0;
    const UNIT_PRICE_ROUNDING_TYPE_1 = 1;
    const UNIT_PRICE_ROUNDING_TYPE_2 = 2;
    const UNIT_PRICE_ROUNDING_TYPE_3 = 3;
    const UNIT_PRICE_ROUNDING_TYPE_4 = 4;
    const UNIT_PRICE_ROUNDING_NUMBER_0 = 0;
    const UNIT_PRICE_ROUNDING_NUMBER_1 = 1;
    const UNIT_PRICE_ROUNDING_NUMBER_2 = 2;
    const UNIT_PRICE_ROUNDING_NUMBER_3 = 3;
    const UNIT_PRICE_ROUNDING_NUMBER_17 = 17;
    const UNIT_PRICE_ROUNDING_NUMBER_4 = 4;
    const UNIT_PRICE_ROUNDING_NUMBER_5 = 5;
    const UNIT_PRICE_ROUNDING_NUMBER_6 = 6;
    const UNIT_PRICE_ROUNDING_NUMBER_7 = 7;
    const UNIT_PRICE_ROUNDING_NUMBER_8 = 8;
    const UNIT_PRICE_ROUNDING_NUMBER_9 = 9;
    const UNIT_PRICE_ROUNDING_NUMBER_10 = 10;
    const UNIT_PRICE_ROUNDING_NUMBER_11 = 11;
    const UNIT_PRICE_ROUNDING_NUMBER_12 = 12;
    const UNIT_PRICE_ROUNDING_NUMBER_13 = 13;
    const UNIT_PRICE_ROUNDING_NUMBER_14 = 14;
    const UNIT_PRICE_ROUNDING_NUMBER_15 = 15;
    const UNIT_PRICE_ROUNDING_NUMBER_16 = 16;
    const SUM_ROUNDING_TYPE_0 = 0;
    const SUM_ROUNDING_TYPE_1 = 1;
    const SUM_ROUNDING_TYPE_2 = 2;
    const SUM_ROUNDING_TYPE_3 = 3;
    const SUM_ROUNDING_TYPE_4 = 4;
    const SUM_ROUNDING_NUMBER_0 = 0;
    const SUM_ROUNDING_NUMBER_1 = 1;
    const SUM_ROUNDING_NUMBER_2 = 2;
    const SUM_ROUNDING_NUMBER_3 = 3;
    const SUM_ROUNDING_NUMBER_17 = 17;
    const SUM_ROUNDING_NUMBER_4 = 4;
    const SUM_ROUNDING_NUMBER_5 = 5;
    const SUM_ROUNDING_NUMBER_6 = 6;
    const SUM_ROUNDING_NUMBER_7 = 7;
    const SUM_ROUNDING_NUMBER_8 = 8;
    const SUM_ROUNDING_NUMBER_9 = 9;
    const SUM_ROUNDING_NUMBER_10 = 10;
    const SUM_ROUNDING_NUMBER_11 = 11;
    const SUM_ROUNDING_NUMBER_12 = 12;
    const SUM_ROUNDING_NUMBER_13 = 13;
    const SUM_ROUNDING_NUMBER_14 = 14;
    const SUM_ROUNDING_NUMBER_15 = 15;
    const SUM_ROUNDING_NUMBER_16 = 16;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemTypeAllowableValues()
    {
        return [
            self::ITEM_TYPE_0,
            self::ITEM_TYPE_1,
            self::ITEM_TYPE_2,
            self::ITEM_TYPE_5,
            self::ITEM_TYPE_6,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitPriceRoundingTypeAllowableValues()
    {
        return [
            self::UNIT_PRICE_ROUNDING_TYPE_0,
            self::UNIT_PRICE_ROUNDING_TYPE_1,
            self::UNIT_PRICE_ROUNDING_TYPE_2,
            self::UNIT_PRICE_ROUNDING_TYPE_3,
            self::UNIT_PRICE_ROUNDING_TYPE_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitPriceRoundingNumberAllowableValues()
    {
        return [
            self::UNIT_PRICE_ROUNDING_NUMBER_0,
            self::UNIT_PRICE_ROUNDING_NUMBER_1,
            self::UNIT_PRICE_ROUNDING_NUMBER_2,
            self::UNIT_PRICE_ROUNDING_NUMBER_3,
            self::UNIT_PRICE_ROUNDING_NUMBER_17,
            self::UNIT_PRICE_ROUNDING_NUMBER_4,
            self::UNIT_PRICE_ROUNDING_NUMBER_5,
            self::UNIT_PRICE_ROUNDING_NUMBER_6,
            self::UNIT_PRICE_ROUNDING_NUMBER_7,
            self::UNIT_PRICE_ROUNDING_NUMBER_8,
            self::UNIT_PRICE_ROUNDING_NUMBER_9,
            self::UNIT_PRICE_ROUNDING_NUMBER_10,
            self::UNIT_PRICE_ROUNDING_NUMBER_11,
            self::UNIT_PRICE_ROUNDING_NUMBER_12,
            self::UNIT_PRICE_ROUNDING_NUMBER_13,
            self::UNIT_PRICE_ROUNDING_NUMBER_14,
            self::UNIT_PRICE_ROUNDING_NUMBER_15,
            self::UNIT_PRICE_ROUNDING_NUMBER_16,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSumRoundingTypeAllowableValues()
    {
        return [
            self::SUM_ROUNDING_TYPE_0,
            self::SUM_ROUNDING_TYPE_1,
            self::SUM_ROUNDING_TYPE_2,
            self::SUM_ROUNDING_TYPE_3,
            self::SUM_ROUNDING_TYPE_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSumRoundingNumberAllowableValues()
    {
        return [
            self::SUM_ROUNDING_NUMBER_0,
            self::SUM_ROUNDING_NUMBER_1,
            self::SUM_ROUNDING_NUMBER_2,
            self::SUM_ROUNDING_NUMBER_3,
            self::SUM_ROUNDING_NUMBER_17,
            self::SUM_ROUNDING_NUMBER_4,
            self::SUM_ROUNDING_NUMBER_5,
            self::SUM_ROUNDING_NUMBER_6,
            self::SUM_ROUNDING_NUMBER_7,
            self::SUM_ROUNDING_NUMBER_8,
            self::SUM_ROUNDING_NUMBER_9,
            self::SUM_ROUNDING_NUMBER_10,
            self::SUM_ROUNDING_NUMBER_11,
            self::SUM_ROUNDING_NUMBER_12,
            self::SUM_ROUNDING_NUMBER_13,
            self::SUM_ROUNDING_NUMBER_14,
            self::SUM_ROUNDING_NUMBER_15,
            self::SUM_ROUNDING_NUMBER_16,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['record_external_identificator'] = $data['record_external_identificator'] ?? null;
        $this->container['stock_items_name'] = $data['stock_items_name'] ?? null;
        $this->container['stock_name'] = $data['stock_name'] ?? null;
        $this->container['plu'] = $data['plu'] ?? null;
        $this->container['date_manufacture'] = $data['date_manufacture'] ?? null;
        $this->container['date_expiration'] = $data['date_expiration'] ?? null;
        $this->container['serial_number'] = $data['serial_number'] ?? null;
        $this->container['user_amount'] = $data['user_amount'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['date_expiration_for_buyer'] = $data['date_expiration_for_buyer'] ?? null;
        $this->container['value_name_1'] = $data['value_name_1'] ?? null;
        $this->container['value_name_2'] = $data['value_name_2'] ?? null;
        $this->container['value_name_3'] = $data['value_name_3'] ?? null;
        $this->container['value_name_4'] = $data['value_name_4'] ?? null;
        $this->container['value_name_5'] = $data['value_name_5'] ?? null;
        $this->container['value_name_6'] = $data['value_name_6'] ?? null;
        $this->container['item_type'] = $data['item_type'] ?? null;
        $this->container['unit_price_rounding_type'] = $data['unit_price_rounding_type'] ?? null;
        $this->container['unit_price_rounding_number'] = $data['unit_price_rounding_number'] ?? null;
        $this->container['sum_rounding_type'] = $data['sum_rounding_type'] ?? null;
        $this->container['sum_rounding_number'] = $data['sum_rounding_number'] ?? null;
        $this->container['measure_unit'] = $data['measure_unit'] ?? null;
        $this->container['date_reservation'] = $data['date_reservation'] ?? null;
        $this->container['reservated_amount'] = $data['reservated_amount'] ?? null;
        $this->container['stock_item_code'] = $data['stock_item_code'] ?? null;
        $this->container['product_code_type'] = $data['product_code_type'] ?? null;
        $this->container['account_md_syn'] = $data['account_md_syn'] ?? null;
        $this->container['account_md_anl'] = $data['account_md_anl'] ?? null;
        $this->container['account_dal_syn'] = $data['account_dal_syn'] ?? null;
        $this->container['account_dal_anl'] = $data['account_dal_anl'] ?? null;
        $this->container['ist_code'] = $data['ist_code'] ?? null;
        $this->container['stock_items_ns_number'] = $data['stock_items_ns_number'] ?? null;
        $this->container['stock_code'] = $data['stock_code'] ?? null;
        $this->container['ia_name_1'] = $data['ia_name_1'] ?? null;
        $this->container['ia_name_2'] = $data['ia_name_2'] ?? null;
        $this->container['ia_name_3'] = $data['ia_name_3'] ?? null;
        $this->container['ia_name_4'] = $data['ia_name_4'] ?? null;
        $this->container['ia_name_5'] = $data['ia_name_5'] ?? null;
        $this->container['ia_name_6'] = $data['ia_name_6'] ?? null;
        $this->container['ia_code_1'] = $data['ia_code_1'] ?? null;
        $this->container['ia_code_2'] = $data['ia_code_2'] ?? null;
        $this->container['ia_code_3'] = $data['ia_code_3'] ?? null;
        $this->container['ia_code_4'] = $data['ia_code_4'] ?? null;
        $this->container['ia_code_5'] = $data['ia_code_5'] ?? null;
        $this->container['ia_code_6'] = $data['ia_code_6'] ?? null;
        $this->container['item_name'] = $data['item_name'] ?? null;
        $this->container['unit_price_base'] = $data['unit_price_base'] ?? null;
        $this->container['unit_price_base_vat'] = $data['unit_price_base_vat'] ?? null;
        $this->container['unit_discount_percent'] = $data['unit_discount_percent'] ?? null;
        $this->container['unit_discount'] = $data['unit_discount'] ?? null;
        $this->container['unit_discount_vat'] = $data['unit_discount_vat'] ?? null;
        $this->container['unit_price'] = $data['unit_price'] ?? null;
        $this->container['unit_price_vat'] = $data['unit_price_vat'] ?? null;
        $this->container['sum'] = $data['sum'] ?? null;
        $this->container['sum_vat'] = $data['sum_vat'] ?? null;
        $this->container['price_manager'] = $data['price_manager'] ?? null;
        $this->container['vat_rate_sys_code'] = $data['vat_rate_sys_code'] ?? null;
        $this->container['real_accounting_balance'] = $data['real_accounting_balance'] ?? null;
        $this->container['stock_item_weight'] = $data['stock_item_weight'] ?? null;
        $this->container['custom_columns'] = $data['custom_columns'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['record_external_identificator'] === null) {
            $invalidProperties[] = "'record_external_identificator' can't be null";
        }
        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($this->container['item_type']) && !in_array($this->container['item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_type', must be one of '%s'",
                $this->container['item_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnitPriceRoundingTypeAllowableValues();
        if (!is_null($this->container['unit_price_rounding_type']) && !in_array($this->container['unit_price_rounding_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_price_rounding_type', must be one of '%s'",
                $this->container['unit_price_rounding_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnitPriceRoundingNumberAllowableValues();
        if (!is_null($this->container['unit_price_rounding_number']) && !in_array($this->container['unit_price_rounding_number'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_price_rounding_number', must be one of '%s'",
                $this->container['unit_price_rounding_number'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSumRoundingTypeAllowableValues();
        if (!is_null($this->container['sum_rounding_type']) && !in_array($this->container['sum_rounding_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sum_rounding_type', must be one of '%s'",
                $this->container['sum_rounding_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSumRoundingNumberAllowableValues();
        if (!is_null($this->container['sum_rounding_number']) && !in_array($this->container['sum_rounding_number'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sum_rounding_number', must be one of '%s'",
                $this->container['sum_rounding_number'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets record_external_identificator
     *
     * @return string
     */
    public function getRecordExternalIdentificator()
    {
        return $this->container['record_external_identificator'];
    }

    /**
     * Sets record_external_identificator
     *
     * @param string $record_external_identificator Externý identifikátor slúži na komunikáciu cez API.   Identifikátor bude vrátený v odpovedi na request, aby ste dokázali identifikovať ku ktorému záznamu patria odpovede poslané ako response.  Hodnota sa neukladá, ale mala by byť jedinečná.
     *
     * @return self
     */
    public function setRecordExternalIdentificator($record_external_identificator)
    {
        $this->container['record_external_identificator'] = $record_external_identificator;

        return $this;
    }

    /**
     * Gets stock_items_name
     *
     * @return string|null
     */
    public function getStockItemsName()
    {
        return $this->container['stock_items_name'];
    }

    /**
     * Sets stock_items_name
     *
     * @param string|null $stock_items_name Názov skladovej karty, služby, voľnej položky.
     *
     * @return self
     */
    public function setStockItemsName($stock_items_name)
    {
        $this->container['stock_items_name'] = $stock_items_name;

        return $this;
    }

    /**
     * Gets stock_name
     *
     * @return string|null
     */
    public function getStockName()
    {
        return $this->container['stock_name'];
    }

    /**
     * Sets stock_name
     *
     * @param string|null $stock_name Názov skladu.
     *
     * @return self
     */
    public function setStockName($stock_name)
    {
        $this->container['stock_name'] = $stock_name;

        return $this;
    }

    /**
     * Gets plu
     *
     * @return int|null
     */
    public function getPlu()
    {
        return $this->container['plu'];
    }

    /**
     * Sets plu
     *
     * @param int|null $plu PLU.
     *
     * @return self
     */
    public function setPlu($plu)
    {
        $this->container['plu'] = $plu;

        return $this;
    }

    /**
     * Gets date_manufacture
     *
     * @return \DateTime|null
     */
    public function getDateManufacture()
    {
        return $this->container['date_manufacture'];
    }

    /**
     * Sets date_manufacture
     *
     * @param \DateTime|null $date_manufacture Dátum výroby.
     *
     * @return self
     */
    public function setDateManufacture($date_manufacture)
    {
        $this->container['date_manufacture'] = $date_manufacture;

        return $this;
    }

    /**
     * Gets date_expiration
     *
     * @return \DateTime|null
     */
    public function getDateExpiration()
    {
        return $this->container['date_expiration'];
    }

    /**
     * Sets date_expiration
     *
     * @param \DateTime|null $date_expiration Záručná doba od dodávateľa .
     *
     * @return self
     */
    public function setDateExpiration($date_expiration)
    {
        $this->container['date_expiration'] = $date_expiration;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number Výrobné číslo / šarža.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets user_amount
     *
     * @return double|null
     */
    public function getUserAmount()
    {
        return $this->container['user_amount'];
    }

    /**
     * Sets user_amount
     *
     * @param double|null $user_amount Množstvo.
     *
     * @return self
     */
    public function setUserAmount($user_amount)
    {
        $this->container['user_amount'] = $user_amount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Popis.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date_expiration_for_buyer
     *
     * @return \DateTime|null
     */
    public function getDateExpirationForBuyer()
    {
        return $this->container['date_expiration_for_buyer'];
    }

    /**
     * Sets date_expiration_for_buyer
     *
     * @param \DateTime|null $date_expiration_for_buyer Záručná doba pre odberateľa.
     *
     * @return self
     */
    public function setDateExpirationForBuyer($date_expiration_for_buyer)
    {
        $this->container['date_expiration_for_buyer'] = $date_expiration_for_buyer;

        return $this;
    }

    /**
     * Gets value_name_1
     *
     * @return string|null
     */
    public function getValueName1()
    {
        return $this->container['value_name_1'];
    }

    /**
     * Sets value_name_1
     *
     * @param string|null $value_name_1 Vlastnosť 1 - názov.
     *
     * @return self
     */
    public function setValueName1($value_name_1)
    {
        $this->container['value_name_1'] = $value_name_1;

        return $this;
    }

    /**
     * Gets value_name_2
     *
     * @return string|null
     */
    public function getValueName2()
    {
        return $this->container['value_name_2'];
    }

    /**
     * Sets value_name_2
     *
     * @param string|null $value_name_2 Vlastnosť 2 - názov.
     *
     * @return self
     */
    public function setValueName2($value_name_2)
    {
        $this->container['value_name_2'] = $value_name_2;

        return $this;
    }

    /**
     * Gets value_name_3
     *
     * @return string|null
     */
    public function getValueName3()
    {
        return $this->container['value_name_3'];
    }

    /**
     * Sets value_name_3
     *
     * @param string|null $value_name_3 Vlastnosť 3 - názov.
     *
     * @return self
     */
    public function setValueName3($value_name_3)
    {
        $this->container['value_name_3'] = $value_name_3;

        return $this;
    }

    /**
     * Gets value_name_4
     *
     * @return string|null
     */
    public function getValueName4()
    {
        return $this->container['value_name_4'];
    }

    /**
     * Sets value_name_4
     *
     * @param string|null $value_name_4 Vlastnosť 4 - názov.
     *
     * @return self
     */
    public function setValueName4($value_name_4)
    {
        $this->container['value_name_4'] = $value_name_4;

        return $this;
    }

    /**
     * Gets value_name_5
     *
     * @return string|null
     */
    public function getValueName5()
    {
        return $this->container['value_name_5'];
    }

    /**
     * Sets value_name_5
     *
     * @param string|null $value_name_5 Vlastnosť 5 - názov.
     *
     * @return self
     */
    public function setValueName5($value_name_5)
    {
        $this->container['value_name_5'] = $value_name_5;

        return $this;
    }

    /**
     * Gets value_name_6
     *
     * @return string|null
     */
    public function getValueName6()
    {
        return $this->container['value_name_6'];
    }

    /**
     * Sets value_name_6
     *
     * @param string|null $value_name_6 Vlastnosť 6 - názov.
     *
     * @return self
     */
    public function setValueName6($value_name_6)
    {
        $this->container['value_name_6'] = $value_name_6;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return int|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param int|null $item_type Typ položky.  0 - Nedefinované  1 - Skladová karta  2 - Služba  5 - Voľná položka  6 - Zariadenie
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($item_type) && !in_array($item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_type', must be one of '%s'",
                    $item_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets unit_price_rounding_type
     *
     * @return int|null
     */
    public function getUnitPriceRoundingType()
    {
        return $this->container['unit_price_rounding_type'];
    }

    /**
     * Sets unit_price_rounding_type
     *
     * @param int|null $unit_price_rounding_type Typ zaokrúhlenia jednotkovej ceny po zľave.  0 - Nedefinované  1 - Prirodzene  2 - Nahor  3 - Nadol  4 - Nezaokrúhľovať
     *
     * @return self
     */
    public function setUnitPriceRoundingType($unit_price_rounding_type)
    {
        $allowedValues = $this->getUnitPriceRoundingTypeAllowableValues();
        if (!is_null($unit_price_rounding_type) && !in_array($unit_price_rounding_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_price_rounding_type', must be one of '%s'",
                    $unit_price_rounding_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_price_rounding_type'] = $unit_price_rounding_type;

        return $this;
    }

    /**
     * Gets unit_price_rounding_number
     *
     * @return int|null
     */
    public function getUnitPriceRoundingNumber()
    {
        return $this->container['unit_price_rounding_number'];
    }

    /**
     * Sets unit_price_rounding_number
     *
     * @param int|null $unit_price_rounding_number Zaokrúhlenie jednotkovej ceny po zľave.  0 - Nedefinované,  1 - 0.0001,  2 - 0.001,  3 - 0.01,  4 - 0,1.  5 - 0.5,  6 - 1,  7 - 5,  8 - 10,  9 - 50.  10 - 100,  11 - 500,  12 - 1000,  13 - 0.00001,  14 - 0.000001.  15 - 0.0000001.  16 - 0.0000001.  17 - 0.05.
     *
     * @return self
     */
    public function setUnitPriceRoundingNumber($unit_price_rounding_number)
    {
        $allowedValues = $this->getUnitPriceRoundingNumberAllowableValues();
        if (!is_null($unit_price_rounding_number) && !in_array($unit_price_rounding_number, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_price_rounding_number', must be one of '%s'",
                    $unit_price_rounding_number,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_price_rounding_number'] = $unit_price_rounding_number;

        return $this;
    }

    /**
     * Gets sum_rounding_type
     *
     * @return int|null
     */
    public function getSumRoundingType()
    {
        return $this->container['sum_rounding_type'];
    }

    /**
     * Sets sum_rounding_type
     *
     * @param int|null $sum_rounding_type Zaokrúhlenie sumy spolu.  0 - Nedefinované,  1 - Prirodzene,  2 - Nahor,  3 - Nadol,  4 - Nezaokrúhľovať.
     *
     * @return self
     */
    public function setSumRoundingType($sum_rounding_type)
    {
        $allowedValues = $this->getSumRoundingTypeAllowableValues();
        if (!is_null($sum_rounding_type) && !in_array($sum_rounding_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sum_rounding_type', must be one of '%s'",
                    $sum_rounding_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sum_rounding_type'] = $sum_rounding_type;

        return $this;
    }

    /**
     * Gets sum_rounding_number
     *
     * @return int|null
     */
    public function getSumRoundingNumber()
    {
        return $this->container['sum_rounding_number'];
    }

    /**
     * Sets sum_rounding_number
     *
     * @param int|null $sum_rounding_number Typ zaokrúhlenia sumy spolu.  0 - Nedefinované,  1 - 0.0001,  2 - 0.001,  3 - 0.01,  4 - 0,1.  5 - 0.5,  6 - 1,  7 - 5,  8 - 10,  9 - 50.  10 - 100,  11 - 500,  12 - 1000,  13 - 0.00001,  14 - 0.000001.  15 - 0.0000001.  16 - 0.0000001.  17 - 0.05.
     *
     * @return self
     */
    public function setSumRoundingNumber($sum_rounding_number)
    {
        $allowedValues = $this->getSumRoundingNumberAllowableValues();
        if (!is_null($sum_rounding_number) && !in_array($sum_rounding_number, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sum_rounding_number', must be one of '%s'",
                    $sum_rounding_number,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sum_rounding_number'] = $sum_rounding_number;

        return $this;
    }

    /**
     * Gets measure_unit
     *
     * @return string|null
     */
    public function getMeasureUnit()
    {
        return $this->container['measure_unit'];
    }

    /**
     * Sets measure_unit
     *
     * @param string|null $measure_unit Merná jednotka.
     *
     * @return self
     */
    public function setMeasureUnit($measure_unit)
    {
        $this->container['measure_unit'] = $measure_unit;

        return $this;
    }

    /**
     * Gets date_reservation
     *
     * @return \DateTime|null
     */
    public function getDateReservation()
    {
        return $this->container['date_reservation'];
    }

    /**
     * Sets date_reservation
     *
     * @param \DateTime|null $date_reservation Dátum rezervácie na sklade.
     *
     * @return self
     */
    public function setDateReservation($date_reservation)
    {
        $this->container['date_reservation'] = $date_reservation;

        return $this;
    }

    /**
     * Gets reservated_amount
     *
     * @return double|null
     */
    public function getReservatedAmount()
    {
        return $this->container['reservated_amount'];
    }

    /**
     * Sets reservated_amount
     *
     * @param double|null $reservated_amount Rezervované množstvo.
     *
     * @return self
     */
    public function setReservatedAmount($reservated_amount)
    {
        $this->container['reservated_amount'] = $reservated_amount;

        return $this;
    }

    /**
     * Gets stock_item_code
     *
     * @return string|null
     */
    public function getStockItemCode()
    {
        return $this->container['stock_item_code'];
    }

    /**
     * Sets stock_item_code
     *
     * @param string|null $stock_item_code Kód skladovej karty.
     *
     * @return self
     */
    public function setStockItemCode($stock_item_code)
    {
        $this->container['stock_item_code'] = $stock_item_code;

        return $this;
    }

    /**
     * Gets product_code_type
     *
     * @return string|null
     */
    public function getProductCodeType()
    {
        return $this->container['product_code_type'];
    }

    /**
     * Sets product_code_type
     *
     * @param string|null $product_code_type Typ produktového kódu.
     *
     * @return self
     */
    public function setProductCodeType($product_code_type)
    {
        $this->container['product_code_type'] = $product_code_type;

        return $this;
    }

    /**
     * Gets account_md_syn
     *
     * @return string|null
     */
    public function getAccountMdSyn()
    {
        return $this->container['account_md_syn'];
    }

    /**
     * Sets account_md_syn
     *
     * @param string|null $account_md_syn Strana MÁ DAŤ syntetika.
     *
     * @return self
     */
    public function setAccountMdSyn($account_md_syn)
    {
        $this->container['account_md_syn'] = $account_md_syn;

        return $this;
    }

    /**
     * Gets account_md_anl
     *
     * @return string|null
     */
    public function getAccountMdAnl()
    {
        return $this->container['account_md_anl'];
    }

    /**
     * Sets account_md_anl
     *
     * @param string|null $account_md_anl Strana MÁ DAŤ analytika.
     *
     * @return self
     */
    public function setAccountMdAnl($account_md_anl)
    {
        $this->container['account_md_anl'] = $account_md_anl;

        return $this;
    }

    /**
     * Gets account_dal_syn
     *
     * @return string|null
     */
    public function getAccountDalSyn()
    {
        return $this->container['account_dal_syn'];
    }

    /**
     * Sets account_dal_syn
     *
     * @param string|null $account_dal_syn Strana DAL syntetika.
     *
     * @return self
     */
    public function setAccountDalSyn($account_dal_syn)
    {
        $this->container['account_dal_syn'] = $account_dal_syn;

        return $this;
    }

    /**
     * Gets account_dal_anl
     *
     * @return string|null
     */
    public function getAccountDalAnl()
    {
        return $this->container['account_dal_anl'];
    }

    /**
     * Sets account_dal_anl
     *
     * @param string|null $account_dal_anl Strana DAL analytika.
     *
     * @return self
     */
    public function setAccountDalAnl($account_dal_anl)
    {
        $this->container['account_dal_anl'] = $account_dal_anl;

        return $this;
    }

    /**
     * Gets ist_code
     *
     * @return string|null
     */
    public function getIstCode()
    {
        return $this->container['ist_code'];
    }

    /**
     * Sets ist_code
     *
     * @param string|null $ist_code Intrastat - kód kombinovanej nomenklatúry.
     *
     * @return self
     */
    public function setIstCode($ist_code)
    {
        $this->container['ist_code'] = $ist_code;

        return $this;
    }

    /**
     * Gets stock_items_ns_number
     *
     * @return string|null
     */
    public function getStockItemsNsNumber()
    {
        return $this->container['stock_items_ns_number'];
    }

    /**
     * Sets stock_items_ns_number
     *
     * @param string|null $stock_items_ns_number Číslo skladovej karty, služby, voľnej položky.
     *
     * @return self
     */
    public function setStockItemsNsNumber($stock_items_ns_number)
    {
        $this->container['stock_items_ns_number'] = $stock_items_ns_number;

        return $this;
    }

    /**
     * Gets stock_code
     *
     * @return string|null
     */
    public function getStockCode()
    {
        return $this->container['stock_code'];
    }

    /**
     * Sets stock_code
     *
     * @param string|null $stock_code Kód skladu.
     *
     * @return self
     */
    public function setStockCode($stock_code)
    {
        $this->container['stock_code'] = $stock_code;

        return $this;
    }

    /**
     * Gets ia_name_1
     *
     * @return string|null
     */
    public function getIaName1()
    {
        return $this->container['ia_name_1'];
    }

    /**
     * Sets ia_name_1
     *
     * @param string|null $ia_name_1 Interné rozúčtovanie 1 - názov.
     *
     * @return self
     */
    public function setIaName1($ia_name_1)
    {
        $this->container['ia_name_1'] = $ia_name_1;

        return $this;
    }

    /**
     * Gets ia_name_2
     *
     * @return string|null
     */
    public function getIaName2()
    {
        return $this->container['ia_name_2'];
    }

    /**
     * Sets ia_name_2
     *
     * @param string|null $ia_name_2 Interné rozúčtovanie 2 - názov.
     *
     * @return self
     */
    public function setIaName2($ia_name_2)
    {
        $this->container['ia_name_2'] = $ia_name_2;

        return $this;
    }

    /**
     * Gets ia_name_3
     *
     * @return string|null
     */
    public function getIaName3()
    {
        return $this->container['ia_name_3'];
    }

    /**
     * Sets ia_name_3
     *
     * @param string|null $ia_name_3 Interné rozúčtovanie 3 - názov.
     *
     * @return self
     */
    public function setIaName3($ia_name_3)
    {
        $this->container['ia_name_3'] = $ia_name_3;

        return $this;
    }

    /**
     * Gets ia_name_4
     *
     * @return string|null
     */
    public function getIaName4()
    {
        return $this->container['ia_name_4'];
    }

    /**
     * Sets ia_name_4
     *
     * @param string|null $ia_name_4 Interné rozúčtovanie 4 - názov.
     *
     * @return self
     */
    public function setIaName4($ia_name_4)
    {
        $this->container['ia_name_4'] = $ia_name_4;

        return $this;
    }

    /**
     * Gets ia_name_5
     *
     * @return string|null
     */
    public function getIaName5()
    {
        return $this->container['ia_name_5'];
    }

    /**
     * Sets ia_name_5
     *
     * @param string|null $ia_name_5 Interné rozúčtovanie 5 - názov.
     *
     * @return self
     */
    public function setIaName5($ia_name_5)
    {
        $this->container['ia_name_5'] = $ia_name_5;

        return $this;
    }

    /**
     * Gets ia_name_6
     *
     * @return string|null
     */
    public function getIaName6()
    {
        return $this->container['ia_name_6'];
    }

    /**
     * Sets ia_name_6
     *
     * @param string|null $ia_name_6 Interné rozúčtovanie 6 - názov.
     *
     * @return self
     */
    public function setIaName6($ia_name_6)
    {
        $this->container['ia_name_6'] = $ia_name_6;

        return $this;
    }

    /**
     * Gets ia_code_1
     *
     * @return string|null
     */
    public function getIaCode1()
    {
        return $this->container['ia_code_1'];
    }

    /**
     * Sets ia_code_1
     *
     * @param string|null $ia_code_1 Interné rozúčtovanie 1 - kód.
     *
     * @return self
     */
    public function setIaCode1($ia_code_1)
    {
        $this->container['ia_code_1'] = $ia_code_1;

        return $this;
    }

    /**
     * Gets ia_code_2
     *
     * @return string|null
     */
    public function getIaCode2()
    {
        return $this->container['ia_code_2'];
    }

    /**
     * Sets ia_code_2
     *
     * @param string|null $ia_code_2 Interné rozúčtovanie 2 - kód.
     *
     * @return self
     */
    public function setIaCode2($ia_code_2)
    {
        $this->container['ia_code_2'] = $ia_code_2;

        return $this;
    }

    /**
     * Gets ia_code_3
     *
     * @return string|null
     */
    public function getIaCode3()
    {
        return $this->container['ia_code_3'];
    }

    /**
     * Sets ia_code_3
     *
     * @param string|null $ia_code_3 Interné rozúčtovanie 3 - kód.
     *
     * @return self
     */
    public function setIaCode3($ia_code_3)
    {
        $this->container['ia_code_3'] = $ia_code_3;

        return $this;
    }

    /**
     * Gets ia_code_4
     *
     * @return string|null
     */
    public function getIaCode4()
    {
        return $this->container['ia_code_4'];
    }

    /**
     * Sets ia_code_4
     *
     * @param string|null $ia_code_4 Interné rozúčtovanie 4 - kód.
     *
     * @return self
     */
    public function setIaCode4($ia_code_4)
    {
        $this->container['ia_code_4'] = $ia_code_4;

        return $this;
    }

    /**
     * Gets ia_code_5
     *
     * @return string|null
     */
    public function getIaCode5()
    {
        return $this->container['ia_code_5'];
    }

    /**
     * Sets ia_code_5
     *
     * @param string|null $ia_code_5 Interné rozúčtovanie 5 - kód.
     *
     * @return self
     */
    public function setIaCode5($ia_code_5)
    {
        $this->container['ia_code_5'] = $ia_code_5;

        return $this;
    }

    /**
     * Gets ia_code_6
     *
     * @return string|null
     */
    public function getIaCode6()
    {
        return $this->container['ia_code_6'];
    }

    /**
     * Sets ia_code_6
     *
     * @param string|null $ia_code_6 Interné rozúčtovanie 6 - kód.
     *
     * @return self
     */
    public function setIaCode6($ia_code_6)
    {
        $this->container['ia_code_6'] = $ia_code_6;

        return $this;
    }

    /**
     * Gets item_name
     *
     * @return string|null
     */
    public function getItemName()
    {
        return $this->container['item_name'];
    }

    /**
     * Sets item_name
     *
     * @param string|null $item_name Vlastný názov položky.
     *
     * @return self
     */
    public function setItemName($item_name)
    {
        $this->container['item_name'] = $item_name;

        return $this;
    }

    /**
     * Gets unit_price_base
     *
     * @return double|null
     */
    public function getUnitPriceBase()
    {
        return $this->container['unit_price_base'];
    }

    /**
     * Sets unit_price_base
     *
     * @param double|null $unit_price_base Jednotková cena bez DPH.
     *
     * @return self
     */
    public function setUnitPriceBase($unit_price_base)
    {
        $this->container['unit_price_base'] = $unit_price_base;

        return $this;
    }

    /**
     * Gets unit_price_base_vat
     *
     * @return double|null
     */
    public function getUnitPriceBaseVat()
    {
        return $this->container['unit_price_base_vat'];
    }

    /**
     * Sets unit_price_base_vat
     *
     * @param double|null $unit_price_base_vat Jednotková cena s DPH.
     *
     * @return self
     */
    public function setUnitPriceBaseVat($unit_price_base_vat)
    {
        $this->container['unit_price_base_vat'] = $unit_price_base_vat;

        return $this;
    }

    /**
     * Gets unit_discount_percent
     *
     * @return double|null
     */
    public function getUnitDiscountPercent()
    {
        return $this->container['unit_discount_percent'];
    }

    /**
     * Sets unit_discount_percent
     *
     * @param double|null $unit_discount_percent Zľava bez DPH v percentách.
     *
     * @return self
     */
    public function setUnitDiscountPercent($unit_discount_percent)
    {
        $this->container['unit_discount_percent'] = $unit_discount_percent;

        return $this;
    }

    /**
     * Gets unit_discount
     *
     * @return double|null
     */
    public function getUnitDiscount()
    {
        return $this->container['unit_discount'];
    }

    /**
     * Sets unit_discount
     *
     * @param double|null $unit_discount Zľava bez DPH v mene dokladu.
     *
     * @return self
     */
    public function setUnitDiscount($unit_discount)
    {
        $this->container['unit_discount'] = $unit_discount;

        return $this;
    }

    /**
     * Gets unit_discount_vat
     *
     * @return double|null
     */
    public function getUnitDiscountVat()
    {
        return $this->container['unit_discount_vat'];
    }

    /**
     * Sets unit_discount_vat
     *
     * @param double|null $unit_discount_vat Zľava s DPH v mene dokladu.
     *
     * @return self
     */
    public function setUnitDiscountVat($unit_discount_vat)
    {
        $this->container['unit_discount_vat'] = $unit_discount_vat;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double|null $unit_price Cena po zľave bez DPH.
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_vat
     *
     * @return double|null
     */
    public function getUnitPriceVat()
    {
        return $this->container['unit_price_vat'];
    }

    /**
     * Sets unit_price_vat
     *
     * @param double|null $unit_price_vat Cena po zľave s DPH.
     *
     * @return self
     */
    public function setUnitPriceVat($unit_price_vat)
    {
        $this->container['unit_price_vat'] = $unit_price_vat;

        return $this;
    }

    /**
     * Gets sum
     *
     * @return double|null
     */
    public function getSum()
    {
        return $this->container['sum'];
    }

    /**
     * Sets sum
     *
     * @param double|null $sum Spolu.
     *
     * @return self
     */
    public function setSum($sum)
    {
        $this->container['sum'] = $sum;

        return $this;
    }

    /**
     * Gets sum_vat
     *
     * @return double|null
     */
    public function getSumVat()
    {
        return $this->container['sum_vat'];
    }

    /**
     * Sets sum_vat
     *
     * @param double|null $sum_vat Spolu s DPH.
     *
     * @return self
     */
    public function setSumVat($sum_vat)
    {
        $this->container['sum_vat'] = $sum_vat;

        return $this;
    }

    /**
     * Gets price_manager
     *
     * @return double|null
     */
    public function getPriceManager()
    {
        return $this->container['price_manager'];
    }

    /**
     * Sets price_manager
     *
     * @param double|null $price_manager Manažérska jednotková cena.
     *
     * @return self
     */
    public function setPriceManager($price_manager)
    {
        $this->container['price_manager'] = $price_manager;

        return $this;
    }

    /**
     * Gets vat_rate_sys_code
     *
     * @return string|null
     */
    public function getVatRateSysCode()
    {
        return $this->container['vat_rate_sys_code'];
    }

    /**
     * Sets vat_rate_sys_code
     *
     * @param string|null $vat_rate_sys_code Sadzba DPH – môže obsahovať hodnoty: 20, 10, 0, N
     *
     * @return self
     */
    public function setVatRateSysCode($vat_rate_sys_code)
    {
        $this->container['vat_rate_sys_code'] = $vat_rate_sys_code;

        return $this;
    }

    /**
     * Gets real_accounting_balance
     *
     * @return double|null
     */
    public function getRealAccountingBalance()
    {
        return $this->container['real_accounting_balance'];
    }

    /**
     * Sets real_accounting_balance
     *
     * @param double|null $real_accounting_balance Skutočný účtovný zostatok
     *
     * @return self
     */
    public function setRealAccountingBalance($real_accounting_balance)
    {
        $this->container['real_accounting_balance'] = $real_accounting_balance;

        return $this;
    }

    /**
     * Gets stock_item_weight
     *
     * @return double|null
     */
    public function getStockItemWeight()
    {
        return $this->container['stock_item_weight'];
    }

    /**
     * Sets stock_item_weight
     *
     * @param double|null $stock_item_weight Jednotková hmotnosť položky (kg)
     *
     * @return self
     */
    public function setStockItemWeight($stock_item_weight)
    {
        $this->container['stock_item_weight'] = $stock_item_weight;

        return $this;
    }

    /**
     * Gets custom_columns
     *
     * @return \OpenAPI\Client\Model\CustomField[]|null
     */
    public function getCustomColumns()
    {
        return $this->container['custom_columns'];
    }

    /**
     * Sets custom_columns
     *
     * @param \OpenAPI\Client\Model\CustomField[]|null $custom_columns custom_columns
     *
     * @return self
     */
    public function setCustomColumns($custom_columns)
    {
        $this->container['custom_columns'] = $custom_columns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


