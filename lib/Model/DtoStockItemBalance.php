<?php
/**
 * DtoStockItemBalance
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ONIX API
 *
 * Dokumentácia ku Web API programu ONIX.  Pre testovanie s reálnymi dátami (dotazovanie servera) je potrebné zadať autorizačný token, ktorý Vám poskytla firma Kros a.s..  Pri každom dotaze je potrebné uviesť cestu ku databáze s dátami (taktiež poskytnutú firmou Kros a.s.).
 *
 * The version of the OpenAPI document: V1
 * Contact: servis.onix@kros.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DtoStockItemBalance Class Doc Comment
 *
 * @category Class
 * @description Zostatok skladovej karty
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DtoStockItemBalance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DtoStockItemBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stock_id' => 'int',
        'stock_code' => 'string',
        'stock_name' => 'string',
        'balance' => 'double',
        'reservated' => 'double',
        'available' => 'double',
        'stock_price' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stock_id' => 'int64',
        'stock_code' => null,
        'stock_name' => null,
        'balance' => 'double',
        'reservated' => 'double',
        'available' => 'double',
        'stock_price' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stock_id' => 'StockId',
        'stock_code' => 'StockCode',
        'stock_name' => 'StockName',
        'balance' => 'Balance',
        'reservated' => 'Reservated',
        'available' => 'Available',
        'stock_price' => 'StockPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stock_id' => 'setStockId',
        'stock_code' => 'setStockCode',
        'stock_name' => 'setStockName',
        'balance' => 'setBalance',
        'reservated' => 'setReservated',
        'available' => 'setAvailable',
        'stock_price' => 'setStockPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stock_id' => 'getStockId',
        'stock_code' => 'getStockCode',
        'stock_name' => 'getStockName',
        'balance' => 'getBalance',
        'reservated' => 'getReservated',
        'available' => 'getAvailable',
        'stock_price' => 'getStockPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stock_id'] = $data['stock_id'] ?? null;
        $this->container['stock_code'] = $data['stock_code'] ?? null;
        $this->container['stock_name'] = $data['stock_name'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['reservated'] = $data['reservated'] ?? null;
        $this->container['available'] = $data['available'] ?? null;
        $this->container['stock_price'] = $data['stock_price'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stock_id
     *
     * @return int|null
     */
    public function getStockId()
    {
        return $this->container['stock_id'];
    }

    /**
     * Sets stock_id
     *
     * @param int|null $stock_id ID skladu
     *
     * @return self
     */
    public function setStockId($stock_id)
    {
        $this->container['stock_id'] = $stock_id;

        return $this;
    }

    /**
     * Gets stock_code
     *
     * @return string|null
     */
    public function getStockCode()
    {
        return $this->container['stock_code'];
    }

    /**
     * Sets stock_code
     *
     * @param string|null $stock_code Kód skladu
     *
     * @return self
     */
    public function setStockCode($stock_code)
    {
        $this->container['stock_code'] = $stock_code;

        return $this;
    }

    /**
     * Gets stock_name
     *
     * @return string|null
     */
    public function getStockName()
    {
        return $this->container['stock_name'];
    }

    /**
     * Sets stock_name
     *
     * @param string|null $stock_name Názov skladu
     *
     * @return self
     */
    public function setStockName($stock_name)
    {
        $this->container['stock_name'] = $stock_name;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double|null $balance Zostatok skladovej karty
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets reservated
     *
     * @return double|null
     */
    public function getReservated()
    {
        return $this->container['reservated'];
    }

    /**
     * Sets reservated
     *
     * @param double|null $reservated Rezervované množstvo skladovej karty
     *
     * @return self
     */
    public function setReservated($reservated)
    {
        $this->container['reservated'] = $reservated;

        return $this;
    }

    /**
     * Gets available
     *
     * @return double|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param double|null $available Dostupné množstvo
     *
     * @return self
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets stock_price
     *
     * @return double|null
     */
    public function getStockPrice()
    {
        return $this->container['stock_price'];
    }

    /**
     * Sets stock_price
     *
     * @param double|null $stock_price Skladová cena
     *
     * @return self
     */
    public function setStockPrice($stock_price)
    {
        $this->container['stock_price'] = $stock_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


