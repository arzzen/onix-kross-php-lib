<?php
/**
 * DtoPartnersPost
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ONIX API
 *
 * Dokumentácia ku Web API programu ONIX.  Pre testovanie s reálnymi dátami (dotazovanie servera) je potrebné zadať autorizačný token, ktorý Vám poskytla firma Kros a.s..  Pri každom dotaze je potrebné uviesť cestu ku databáze s dátami (taktiež poskytnutú firmou Kros a.s.).
 *
 * The version of the OpenAPI document: V1
 * Contact: servis.onix@kros.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DtoPartnersPost Class Doc Comment
 *
 * @category Class
 * @description DTO trieda pre partnera.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DtoPartnersPost implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DtoPartners_post';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'record_external_identificator' => 'string',
        'name' => 'string',
        'description' => 'string',
        'ns_number' => 'string',
        'reg' => 'string',
        'tax' => 'string',
        'maturity_sendedinvoices' => 'int',
        'maturity_receivedinvoices' => 'int',
        'center' => 'string',
        'department' => 'string',
        'transport_type' => 'string',
        'payment_type' => 'string',
        'guid_ext' => 'string',
        'partner_type' => 'int',
        'vat_no' => 'string',
        'post_code' => 'string',
        'street' => 'string',
        'street_no' => 'string',
        'city' => 'string',
        'state' => 'string',
        'pa_post_code' => 'string',
        'pa_street' => 'string',
        'pa_street_no' => 'string',
        'pa_city' => 'string',
        'pa_state' => 'string',
        'pa_name' => 'string',
        'da_post_code' => 'string',
        'da_street' => 'string',
        'da_street_no' => 'string',
        'da_city' => 'string',
        'da_state' => 'string',
        'da_name' => 'string',
        'contact_first_name' => 'string',
        'contact_surname' => 'string',
        'contact_telephone_number' => 'string',
        'contact_email' => 'string',
        'account_name' => 'string',
        'iban' => 'string',
        'swift' => 'string',
        'account_number' => 'string',
        'bank_code' => 'string',
        'account_curr' => 'string',
        'variable_symbol' => 'string',
        'constant_symbol' => 'string',
        'specific_symbol' => 'string',
        'custom_columns' => '\OpenAPI\Client\Model\CustomField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'record_external_identificator' => null,
        'name' => null,
        'description' => null,
        'ns_number' => null,
        'reg' => null,
        'tax' => null,
        'maturity_sendedinvoices' => 'int32',
        'maturity_receivedinvoices' => 'int32',
        'center' => null,
        'department' => null,
        'transport_type' => null,
        'payment_type' => null,
        'guid_ext' => null,
        'partner_type' => 'int32',
        'vat_no' => null,
        'post_code' => null,
        'street' => null,
        'street_no' => null,
        'city' => null,
        'state' => null,
        'pa_post_code' => null,
        'pa_street' => null,
        'pa_street_no' => null,
        'pa_city' => null,
        'pa_state' => null,
        'pa_name' => null,
        'da_post_code' => null,
        'da_street' => null,
        'da_street_no' => null,
        'da_city' => null,
        'da_state' => null,
        'da_name' => null,
        'contact_first_name' => null,
        'contact_surname' => null,
        'contact_telephone_number' => null,
        'contact_email' => null,
        'account_name' => null,
        'iban' => null,
        'swift' => null,
        'account_number' => null,
        'bank_code' => null,
        'account_curr' => null,
        'variable_symbol' => null,
        'constant_symbol' => null,
        'specific_symbol' => null,
        'custom_columns' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'record_external_identificator' => 'RecordExternalIdentificator',
        'name' => 'Name',
        'description' => 'Description',
        'ns_number' => 'Ns_Number',
        'reg' => 'Reg',
        'tax' => 'Tax',
        'maturity_sendedinvoices' => 'Maturity_Sendedinvoices',
        'maturity_receivedinvoices' => 'Maturity_Receivedinvoices',
        'center' => 'Center',
        'department' => 'Department',
        'transport_type' => 'Transport_Type',
        'payment_type' => 'Payment_Type',
        'guid_ext' => 'Guid_Ext',
        'partner_type' => 'Partner_Type',
        'vat_no' => 'Vat_No',
        'post_code' => 'PostCode',
        'street' => 'Street',
        'street_no' => 'StreetNo',
        'city' => 'City',
        'state' => 'State',
        'pa_post_code' => 'PaPostCode',
        'pa_street' => 'PaStreet',
        'pa_street_no' => 'PaStreetNo',
        'pa_city' => 'PaCity',
        'pa_state' => 'PaState',
        'pa_name' => 'PaName',
        'da_post_code' => 'DaPostCode',
        'da_street' => 'DaStreet',
        'da_street_no' => 'DaStreetNo',
        'da_city' => 'DaCity',
        'da_state' => 'DaState',
        'da_name' => 'DaName',
        'contact_first_name' => 'ContactFirstName',
        'contact_surname' => 'ContactSurname',
        'contact_telephone_number' => 'ContactTelephoneNumber',
        'contact_email' => 'ContactEmail',
        'account_name' => 'AccountName',
        'iban' => 'Iban',
        'swift' => 'Swift',
        'account_number' => 'AccountNumber',
        'bank_code' => 'BankCode',
        'account_curr' => 'AccountCurr',
        'variable_symbol' => 'VariableSymbol',
        'constant_symbol' => 'ConstantSymbol',
        'specific_symbol' => 'SpecificSymbol',
        'custom_columns' => 'CustomColumns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'record_external_identificator' => 'setRecordExternalIdentificator',
        'name' => 'setName',
        'description' => 'setDescription',
        'ns_number' => 'setNsNumber',
        'reg' => 'setReg',
        'tax' => 'setTax',
        'maturity_sendedinvoices' => 'setMaturitySendedinvoices',
        'maturity_receivedinvoices' => 'setMaturityReceivedinvoices',
        'center' => 'setCenter',
        'department' => 'setDepartment',
        'transport_type' => 'setTransportType',
        'payment_type' => 'setPaymentType',
        'guid_ext' => 'setGuidExt',
        'partner_type' => 'setPartnerType',
        'vat_no' => 'setVatNo',
        'post_code' => 'setPostCode',
        'street' => 'setStreet',
        'street_no' => 'setStreetNo',
        'city' => 'setCity',
        'state' => 'setState',
        'pa_post_code' => 'setPaPostCode',
        'pa_street' => 'setPaStreet',
        'pa_street_no' => 'setPaStreetNo',
        'pa_city' => 'setPaCity',
        'pa_state' => 'setPaState',
        'pa_name' => 'setPaName',
        'da_post_code' => 'setDaPostCode',
        'da_street' => 'setDaStreet',
        'da_street_no' => 'setDaStreetNo',
        'da_city' => 'setDaCity',
        'da_state' => 'setDaState',
        'da_name' => 'setDaName',
        'contact_first_name' => 'setContactFirstName',
        'contact_surname' => 'setContactSurname',
        'contact_telephone_number' => 'setContactTelephoneNumber',
        'contact_email' => 'setContactEmail',
        'account_name' => 'setAccountName',
        'iban' => 'setIban',
        'swift' => 'setSwift',
        'account_number' => 'setAccountNumber',
        'bank_code' => 'setBankCode',
        'account_curr' => 'setAccountCurr',
        'variable_symbol' => 'setVariableSymbol',
        'constant_symbol' => 'setConstantSymbol',
        'specific_symbol' => 'setSpecificSymbol',
        'custom_columns' => 'setCustomColumns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'record_external_identificator' => 'getRecordExternalIdentificator',
        'name' => 'getName',
        'description' => 'getDescription',
        'ns_number' => 'getNsNumber',
        'reg' => 'getReg',
        'tax' => 'getTax',
        'maturity_sendedinvoices' => 'getMaturitySendedinvoices',
        'maturity_receivedinvoices' => 'getMaturityReceivedinvoices',
        'center' => 'getCenter',
        'department' => 'getDepartment',
        'transport_type' => 'getTransportType',
        'payment_type' => 'getPaymentType',
        'guid_ext' => 'getGuidExt',
        'partner_type' => 'getPartnerType',
        'vat_no' => 'getVatNo',
        'post_code' => 'getPostCode',
        'street' => 'getStreet',
        'street_no' => 'getStreetNo',
        'city' => 'getCity',
        'state' => 'getState',
        'pa_post_code' => 'getPaPostCode',
        'pa_street' => 'getPaStreet',
        'pa_street_no' => 'getPaStreetNo',
        'pa_city' => 'getPaCity',
        'pa_state' => 'getPaState',
        'pa_name' => 'getPaName',
        'da_post_code' => 'getDaPostCode',
        'da_street' => 'getDaStreet',
        'da_street_no' => 'getDaStreetNo',
        'da_city' => 'getDaCity',
        'da_state' => 'getDaState',
        'da_name' => 'getDaName',
        'contact_first_name' => 'getContactFirstName',
        'contact_surname' => 'getContactSurname',
        'contact_telephone_number' => 'getContactTelephoneNumber',
        'contact_email' => 'getContactEmail',
        'account_name' => 'getAccountName',
        'iban' => 'getIban',
        'swift' => 'getSwift',
        'account_number' => 'getAccountNumber',
        'bank_code' => 'getBankCode',
        'account_curr' => 'getAccountCurr',
        'variable_symbol' => 'getVariableSymbol',
        'constant_symbol' => 'getConstantSymbol',
        'specific_symbol' => 'getSpecificSymbol',
        'custom_columns' => 'getCustomColumns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PARTNER_TYPE_MINUS_2 = -2;
    const PARTNER_TYPE_1 = 1;
    const PARTNER_TYPE_2 = 2;
    const PARTNER_TYPE_0 = 0;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartnerTypeAllowableValues()
    {
        return [
            self::PARTNER_TYPE_MINUS_2,
            self::PARTNER_TYPE_1,
            self::PARTNER_TYPE_2,
            self::PARTNER_TYPE_0,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['record_external_identificator'] = $data['record_external_identificator'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['ns_number'] = $data['ns_number'] ?? null;
        $this->container['reg'] = $data['reg'] ?? null;
        $this->container['tax'] = $data['tax'] ?? null;
        $this->container['maturity_sendedinvoices'] = $data['maturity_sendedinvoices'] ?? null;
        $this->container['maturity_receivedinvoices'] = $data['maturity_receivedinvoices'] ?? null;
        $this->container['center'] = $data['center'] ?? null;
        $this->container['department'] = $data['department'] ?? null;
        $this->container['transport_type'] = $data['transport_type'] ?? null;
        $this->container['payment_type'] = $data['payment_type'] ?? null;
        $this->container['guid_ext'] = $data['guid_ext'] ?? null;
        $this->container['partner_type'] = $data['partner_type'] ?? null;
        $this->container['vat_no'] = $data['vat_no'] ?? null;
        $this->container['post_code'] = $data['post_code'] ?? null;
        $this->container['street'] = $data['street'] ?? null;
        $this->container['street_no'] = $data['street_no'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['pa_post_code'] = $data['pa_post_code'] ?? null;
        $this->container['pa_street'] = $data['pa_street'] ?? null;
        $this->container['pa_street_no'] = $data['pa_street_no'] ?? null;
        $this->container['pa_city'] = $data['pa_city'] ?? null;
        $this->container['pa_state'] = $data['pa_state'] ?? null;
        $this->container['pa_name'] = $data['pa_name'] ?? null;
        $this->container['da_post_code'] = $data['da_post_code'] ?? null;
        $this->container['da_street'] = $data['da_street'] ?? null;
        $this->container['da_street_no'] = $data['da_street_no'] ?? null;
        $this->container['da_city'] = $data['da_city'] ?? null;
        $this->container['da_state'] = $data['da_state'] ?? null;
        $this->container['da_name'] = $data['da_name'] ?? null;
        $this->container['contact_first_name'] = $data['contact_first_name'] ?? null;
        $this->container['contact_surname'] = $data['contact_surname'] ?? null;
        $this->container['contact_telephone_number'] = $data['contact_telephone_number'] ?? null;
        $this->container['contact_email'] = $data['contact_email'] ?? null;
        $this->container['account_name'] = $data['account_name'] ?? null;
        $this->container['iban'] = $data['iban'] ?? null;
        $this->container['swift'] = $data['swift'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['bank_code'] = $data['bank_code'] ?? null;
        $this->container['account_curr'] = $data['account_curr'] ?? null;
        $this->container['variable_symbol'] = $data['variable_symbol'] ?? null;
        $this->container['constant_symbol'] = $data['constant_symbol'] ?? null;
        $this->container['specific_symbol'] = $data['specific_symbol'] ?? null;
        $this->container['custom_columns'] = $data['custom_columns'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['record_external_identificator'] === null) {
            $invalidProperties[] = "'record_external_identificator' can't be null";
        }
        $allowedValues = $this->getPartnerTypeAllowableValues();
        if (!is_null($this->container['partner_type']) && !in_array($this->container['partner_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partner_type', must be one of '%s'",
                $this->container['partner_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets record_external_identificator
     *
     * @return string
     */
    public function getRecordExternalIdentificator()
    {
        return $this->container['record_external_identificator'];
    }

    /**
     * Sets record_external_identificator
     *
     * @param string $record_external_identificator Externý identifikátor slúži na komunikáciu cez API.   Identifikátor bude vrátený v odpovedi na request, aby ste dokázali identifikovať ku ktorému záznamu patria odpovede poslané ako response.  Hodnota sa neukladá, ale mala by byť jedinečná.
     *
     * @return self
     */
    public function setRecordExternalIdentificator($record_external_identificator)
    {
        $this->container['record_external_identificator'] = $record_external_identificator;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Názov partnera.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Poznámka.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ns_number
     *
     * @return string|null
     */
    public function getNsNumber()
    {
        return $this->container['ns_number'];
    }

    /**
     * Sets ns_number
     *
     * @param string|null $ns_number Číslo partnera.
     *
     * @return self
     */
    public function setNsNumber($ns_number)
    {
        $this->container['ns_number'] = $ns_number;

        return $this;
    }

    /**
     * Gets reg
     *
     * @return string|null
     */
    public function getReg()
    {
        return $this->container['reg'];
    }

    /**
     * Sets reg
     *
     * @param string|null $reg IČO.
     *
     * @return self
     */
    public function setReg($reg)
    {
        $this->container['reg'] = $reg;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string|null $tax DIČ.
     *
     * @return self
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets maturity_sendedinvoices
     *
     * @return int|null
     */
    public function getMaturitySendedinvoices()
    {
        return $this->container['maturity_sendedinvoices'];
    }

    /**
     * Sets maturity_sendedinvoices
     *
     * @param int|null $maturity_sendedinvoices Splatnosť odoslaných dokladov.
     *
     * @return self
     */
    public function setMaturitySendedinvoices($maturity_sendedinvoices)
    {
        $this->container['maturity_sendedinvoices'] = $maturity_sendedinvoices;

        return $this;
    }

    /**
     * Gets maturity_receivedinvoices
     *
     * @return int|null
     */
    public function getMaturityReceivedinvoices()
    {
        return $this->container['maturity_receivedinvoices'];
    }

    /**
     * Sets maturity_receivedinvoices
     *
     * @param int|null $maturity_receivedinvoices Splatnosť prijatých dokladov.
     *
     * @return self
     */
    public function setMaturityReceivedinvoices($maturity_receivedinvoices)
    {
        $this->container['maturity_receivedinvoices'] = $maturity_receivedinvoices;

        return $this;
    }

    /**
     * Gets center
     *
     * @return string|null
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     *
     * @param string|null $center Stredisko.
     *
     * @return self
     */
    public function setCenter($center)
    {
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Prevádzka.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string|null
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string|null $transport_type Spôsob dopravy.
     *
     * @return self
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type Forma úhrady.
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets guid_ext
     *
     * @return string|null
     */
    public function getGuidExt()
    {
        return $this->container['guid_ext'];
    }

    /**
     * Sets guid_ext
     *
     * @param string|null $guid_ext Klúč záznamu v externom SW.
     *
     * @return self
     */
    public function setGuidExt($guid_ext)
    {
        $this->container['guid_ext'] = $guid_ext;

        return $this;
    }

    /**
     * Gets partner_type
     *
     * @return int|null
     */
    public function getPartnerType()
    {
        return $this->container['partner_type'];
    }

    /**
     * Sets partner_type
     *
     * @param int|null $partner_type Typ partnera na doklade.  Občan = -2  Podnikateľ - fyzická osoba = 1  Podnikateľ - právnická osoba = 2  Ostatné = 0
     *
     * @return self
     */
    public function setPartnerType($partner_type)
    {
        $allowedValues = $this->getPartnerTypeAllowableValues();
        if (!is_null($partner_type) && !in_array($partner_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partner_type', must be one of '%s'",
                    $partner_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partner_type'] = $partner_type;

        return $this;
    }

    /**
     * Gets vat_no
     *
     * @return string|null
     */
    public function getVatNo()
    {
        return $this->container['vat_no'];
    }

    /**
     * Sets vat_no
     *
     * @param string|null $vat_no IČ DPH.
     *
     * @return self
     */
    public function setVatNo($vat_no)
    {
        $this->container['vat_no'] = $vat_no;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code Fakturačná adresa - PSČ.
     *
     * @return self
     */
    public function setPostCode($post_code)
    {
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Fakturačná adresa - Ulica.
     *
     * @return self
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street_no
     *
     * @return string|null
     */
    public function getStreetNo()
    {
        return $this->container['street_no'];
    }

    /**
     * Sets street_no
     *
     * @param string|null $street_no Fakturačná adresa - Ulica - číslo.
     *
     * @return self
     */
    public function setStreetNo($street_no)
    {
        $this->container['street_no'] = $street_no;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city Fakturačná adresa - Mesto.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Fakturačná adresa - Štát.
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets pa_post_code
     *
     * @return string|null
     */
    public function getPaPostCode()
    {
        return $this->container['pa_post_code'];
    }

    /**
     * Sets pa_post_code
     *
     * @param string|null $pa_post_code Korešpondenčná adresa - PSČ.
     *
     * @return self
     */
    public function setPaPostCode($pa_post_code)
    {
        $this->container['pa_post_code'] = $pa_post_code;

        return $this;
    }

    /**
     * Gets pa_street
     *
     * @return string|null
     */
    public function getPaStreet()
    {
        return $this->container['pa_street'];
    }

    /**
     * Sets pa_street
     *
     * @param string|null $pa_street Korešpondenčná adresa - Ulica.
     *
     * @return self
     */
    public function setPaStreet($pa_street)
    {
        $this->container['pa_street'] = $pa_street;

        return $this;
    }

    /**
     * Gets pa_street_no
     *
     * @return string|null
     */
    public function getPaStreetNo()
    {
        return $this->container['pa_street_no'];
    }

    /**
     * Sets pa_street_no
     *
     * @param string|null $pa_street_no Korešpondenčná adresa - Ulica - číslo.
     *
     * @return self
     */
    public function setPaStreetNo($pa_street_no)
    {
        $this->container['pa_street_no'] = $pa_street_no;

        return $this;
    }

    /**
     * Gets pa_city
     *
     * @return string|null
     */
    public function getPaCity()
    {
        return $this->container['pa_city'];
    }

    /**
     * Sets pa_city
     *
     * @param string|null $pa_city Korešpondenčná adresa - Mesto.
     *
     * @return self
     */
    public function setPaCity($pa_city)
    {
        $this->container['pa_city'] = $pa_city;

        return $this;
    }

    /**
     * Gets pa_state
     *
     * @return string|null
     */
    public function getPaState()
    {
        return $this->container['pa_state'];
    }

    /**
     * Sets pa_state
     *
     * @param string|null $pa_state Korešpondenčná adresa - Štát.
     *
     * @return self
     */
    public function setPaState($pa_state)
    {
        $this->container['pa_state'] = $pa_state;

        return $this;
    }

    /**
     * Gets pa_name
     *
     * @return string|null
     */
    public function getPaName()
    {
        return $this->container['pa_name'];
    }

    /**
     * Sets pa_name
     *
     * @param string|null $pa_name Korešpondenčná adresa - Názov.
     *
     * @return self
     */
    public function setPaName($pa_name)
    {
        $this->container['pa_name'] = $pa_name;

        return $this;
    }

    /**
     * Gets da_post_code
     *
     * @return string|null
     */
    public function getDaPostCode()
    {
        return $this->container['da_post_code'];
    }

    /**
     * Sets da_post_code
     *
     * @param string|null $da_post_code Dodacia adresa - PSČ.
     *
     * @return self
     */
    public function setDaPostCode($da_post_code)
    {
        $this->container['da_post_code'] = $da_post_code;

        return $this;
    }

    /**
     * Gets da_street
     *
     * @return string|null
     */
    public function getDaStreet()
    {
        return $this->container['da_street'];
    }

    /**
     * Sets da_street
     *
     * @param string|null $da_street Dodacia adresa - Ulica.
     *
     * @return self
     */
    public function setDaStreet($da_street)
    {
        $this->container['da_street'] = $da_street;

        return $this;
    }

    /**
     * Gets da_street_no
     *
     * @return string|null
     */
    public function getDaStreetNo()
    {
        return $this->container['da_street_no'];
    }

    /**
     * Sets da_street_no
     *
     * @param string|null $da_street_no Dodacia adresa - Ulica - číslo.
     *
     * @return self
     */
    public function setDaStreetNo($da_street_no)
    {
        $this->container['da_street_no'] = $da_street_no;

        return $this;
    }

    /**
     * Gets da_city
     *
     * @return string|null
     */
    public function getDaCity()
    {
        return $this->container['da_city'];
    }

    /**
     * Sets da_city
     *
     * @param string|null $da_city Dodacia adresa - Mesto.
     *
     * @return self
     */
    public function setDaCity($da_city)
    {
        $this->container['da_city'] = $da_city;

        return $this;
    }

    /**
     * Gets da_state
     *
     * @return string|null
     */
    public function getDaState()
    {
        return $this->container['da_state'];
    }

    /**
     * Sets da_state
     *
     * @param string|null $da_state Dodacia adresa - Štát.
     *
     * @return self
     */
    public function setDaState($da_state)
    {
        $this->container['da_state'] = $da_state;

        return $this;
    }

    /**
     * Gets da_name
     *
     * @return string|null
     */
    public function getDaName()
    {
        return $this->container['da_name'];
    }

    /**
     * Sets da_name
     *
     * @param string|null $da_name Dodacia adresa - Názov.
     *
     * @return self
     */
    public function setDaName($da_name)
    {
        $this->container['da_name'] = $da_name;

        return $this;
    }

    /**
     * Gets contact_first_name
     *
     * @return string|null
     */
    public function getContactFirstName()
    {
        return $this->container['contact_first_name'];
    }

    /**
     * Sets contact_first_name
     *
     * @param string|null $contact_first_name Kontakt - meno.
     *
     * @return self
     */
    public function setContactFirstName($contact_first_name)
    {
        $this->container['contact_first_name'] = $contact_first_name;

        return $this;
    }

    /**
     * Gets contact_surname
     *
     * @return string|null
     */
    public function getContactSurname()
    {
        return $this->container['contact_surname'];
    }

    /**
     * Sets contact_surname
     *
     * @param string|null $contact_surname Kontakt - priezvisko.
     *
     * @return self
     */
    public function setContactSurname($contact_surname)
    {
        $this->container['contact_surname'] = $contact_surname;

        return $this;
    }

    /**
     * Gets contact_telephone_number
     *
     * @return string|null
     */
    public function getContactTelephoneNumber()
    {
        return $this->container['contact_telephone_number'];
    }

    /**
     * Sets contact_telephone_number
     *
     * @param string|null $contact_telephone_number Kontakt - telefónne číslo.
     *
     * @return self
     */
    public function setContactTelephoneNumber($contact_telephone_number)
    {
        $this->container['contact_telephone_number'] = $contact_telephone_number;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email Kontakt - Email.
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name Názov účtu.
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban IBAN.
     *
     * @return self
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets swift
     *
     * @return string|null
     */
    public function getSwift()
    {
        return $this->container['swift'];
    }

    /**
     * Sets swift
     *
     * @param string|null $swift SWIFT.
     *
     * @return self
     */
    public function setSwift($swift)
    {
        $this->container['swift'] = $swift;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Číslo účtu.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string|null
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string|null $bank_code Kód banky.
     *
     * @return self
     */
    public function setBankCode($bank_code)
    {
        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets account_curr
     *
     * @return string|null
     */
    public function getAccountCurr()
    {
        return $this->container['account_curr'];
    }

    /**
     * Sets account_curr
     *
     * @param string|null $account_curr Mena bankového účtu.
     *
     * @return self
     */
    public function setAccountCurr($account_curr)
    {
        $this->container['account_curr'] = $account_curr;

        return $this;
    }

    /**
     * Gets variable_symbol
     *
     * @return string|null
     */
    public function getVariableSymbol()
    {
        return $this->container['variable_symbol'];
    }

    /**
     * Sets variable_symbol
     *
     * @param string|null $variable_symbol Variabilný symbol.
     *
     * @return self
     */
    public function setVariableSymbol($variable_symbol)
    {
        $this->container['variable_symbol'] = $variable_symbol;

        return $this;
    }

    /**
     * Gets constant_symbol
     *
     * @return string|null
     */
    public function getConstantSymbol()
    {
        return $this->container['constant_symbol'];
    }

    /**
     * Sets constant_symbol
     *
     * @param string|null $constant_symbol Konštantný symbol.
     *
     * @return self
     */
    public function setConstantSymbol($constant_symbol)
    {
        $this->container['constant_symbol'] = $constant_symbol;

        return $this;
    }

    /**
     * Gets specific_symbol
     *
     * @return string|null
     */
    public function getSpecificSymbol()
    {
        return $this->container['specific_symbol'];
    }

    /**
     * Sets specific_symbol
     *
     * @param string|null $specific_symbol Špecifický symbol.
     *
     * @return self
     */
    public function setSpecificSymbol($specific_symbol)
    {
        $this->container['specific_symbol'] = $specific_symbol;

        return $this;
    }

    /**
     * Gets custom_columns
     *
     * @return \OpenAPI\Client\Model\CustomField[]|null
     */
    public function getCustomColumns()
    {
        return $this->container['custom_columns'];
    }

    /**
     * Sets custom_columns
     *
     * @param \OpenAPI\Client\Model\CustomField[]|null $custom_columns custom_columns
     *
     * @return self
     */
    public function setCustomColumns($custom_columns)
    {
        $this->container['custom_columns'] = $custom_columns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


