<?php
/**
 * StockItemsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ONIX API
 *
 * Dokumentácia ku Web API programu ONIX.  Pre testovanie s reálnymi dátami (dotazovanie servera) je potrebné zadať autorizačný token, ktorý Vám poskytla firma Kros a.s..  Pri každom dotaze je potrebné uviesť cestu ku databáze s dátami (taktiež poskytnutú firmou Kros a.s.).
 *
 * The version of the OpenAPI document: V1
 * Contact: servis.onix@kros.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StockItemsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StockItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation stockItemsGetAllBalanceForBatchProperty
     *
     * Vracia zostatky pre všetky skladové karty, na všetkých skladoch pre danú vlastnosť dávky.
     *
     * @param  int $property_number property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DtoStockItemPropBalance[]
     */
    public function stockItemsGetAllBalanceForBatchProperty($property_number, $database_path, $select = null)
    {
        list($response) = $this->stockItemsGetAllBalanceForBatchPropertyWithHttpInfo($property_number, $database_path, $select);
        return $response;
    }

    /**
     * Operation stockItemsGetAllBalanceForBatchPropertyWithHttpInfo
     *
     * Vracia zostatky pre všetky skladové karty, na všetkých skladoch pre danú vlastnosť dávky.
     *
     * @param  int $property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DtoStockItemPropBalance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stockItemsGetAllBalanceForBatchPropertyWithHttpInfo($property_number, $database_path, $select = null)
    {
        $request = $this->stockItemsGetAllBalanceForBatchPropertyRequest($property_number, $database_path, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DtoStockItemPropBalance[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DtoStockItemPropBalance[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DtoStockItemPropBalance[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DtoStockItemPropBalance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stockItemsGetAllBalanceForBatchPropertyAsync
     *
     * Vracia zostatky pre všetky skladové karty, na všetkých skladoch pre danú vlastnosť dávky.
     *
     * @param  int $property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockItemsGetAllBalanceForBatchPropertyAsync($property_number, $database_path, $select = null)
    {
        return $this->stockItemsGetAllBalanceForBatchPropertyAsyncWithHttpInfo($property_number, $database_path, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stockItemsGetAllBalanceForBatchPropertyAsyncWithHttpInfo
     *
     * Vracia zostatky pre všetky skladové karty, na všetkých skladoch pre danú vlastnosť dávky.
     *
     * @param  int $property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockItemsGetAllBalanceForBatchPropertyAsyncWithHttpInfo($property_number, $database_path, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\DtoStockItemPropBalance[]';
        $request = $this->stockItemsGetAllBalanceForBatchPropertyRequest($property_number, $database_path, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stockItemsGetAllBalanceForBatchProperty'
     *
     * @param  int $property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function stockItemsGetAllBalanceForBatchPropertyRequest($property_number, $database_path, $select = null)
    {
        // verify the required parameter 'property_number' is set
        if ($property_number === null || (is_array($property_number) && count($property_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_number when calling stockItemsGetAllBalanceForBatchProperty'
            );
        }
        // verify the required parameter 'database_path' is set
        if ($database_path === null || (is_array($database_path) && count($database_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_path when calling stockItemsGetAllBalanceForBatchProperty'
            );
        }

        $resourcePath = '/api/v1/stockitems/propertyBalancesAll/{propertyNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, '', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }

        // header params
        if ($database_path !== null) {
            $headerParams['DatabasePath'] = ObjectSerializer::toHeaderValue($database_path);
        }

        // path params
        if ($property_number !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyNumber' . '}',
                ObjectSerializer::toPathValue($property_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stockItemsGetStockItemBalanceForBatchProperty
     *
     * Vracia zostatky skladovej karty, na konkrétnom sklade pre danú vlastnosť dávky.
     *
     * @param  int $stock_item_id stock_item_id (required)
     * @param  int $stock_id stock_id (required)
     * @param  int $property_number property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DtoStockItemPropBalance[]
     */
    public function stockItemsGetStockItemBalanceForBatchProperty($stock_item_id, $stock_id, $property_number, $database_path, $select = null)
    {
        list($response) = $this->stockItemsGetStockItemBalanceForBatchPropertyWithHttpInfo($stock_item_id, $stock_id, $property_number, $database_path, $select);
        return $response;
    }

    /**
     * Operation stockItemsGetStockItemBalanceForBatchPropertyWithHttpInfo
     *
     * Vracia zostatky skladovej karty, na konkrétnom sklade pre danú vlastnosť dávky.
     *
     * @param  int $stock_item_id (required)
     * @param  int $stock_id (required)
     * @param  int $property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DtoStockItemPropBalance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stockItemsGetStockItemBalanceForBatchPropertyWithHttpInfo($stock_item_id, $stock_id, $property_number, $database_path, $select = null)
    {
        $request = $this->stockItemsGetStockItemBalanceForBatchPropertyRequest($stock_item_id, $stock_id, $property_number, $database_path, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DtoStockItemPropBalance[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DtoStockItemPropBalance[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DtoStockItemPropBalance[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DtoStockItemPropBalance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stockItemsGetStockItemBalanceForBatchPropertyAsync
     *
     * Vracia zostatky skladovej karty, na konkrétnom sklade pre danú vlastnosť dávky.
     *
     * @param  int $stock_item_id (required)
     * @param  int $stock_id (required)
     * @param  int $property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockItemsGetStockItemBalanceForBatchPropertyAsync($stock_item_id, $stock_id, $property_number, $database_path, $select = null)
    {
        return $this->stockItemsGetStockItemBalanceForBatchPropertyAsyncWithHttpInfo($stock_item_id, $stock_id, $property_number, $database_path, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stockItemsGetStockItemBalanceForBatchPropertyAsyncWithHttpInfo
     *
     * Vracia zostatky skladovej karty, na konkrétnom sklade pre danú vlastnosť dávky.
     *
     * @param  int $stock_item_id (required)
     * @param  int $stock_id (required)
     * @param  int $property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockItemsGetStockItemBalanceForBatchPropertyAsyncWithHttpInfo($stock_item_id, $stock_id, $property_number, $database_path, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\DtoStockItemPropBalance[]';
        $request = $this->stockItemsGetStockItemBalanceForBatchPropertyRequest($stock_item_id, $stock_id, $property_number, $database_path, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stockItemsGetStockItemBalanceForBatchProperty'
     *
     * @param  int $stock_item_id (required)
     * @param  int $stock_id (required)
     * @param  int $property_number (required)
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function stockItemsGetStockItemBalanceForBatchPropertyRequest($stock_item_id, $stock_id, $property_number, $database_path, $select = null)
    {
        // verify the required parameter 'stock_item_id' is set
        if ($stock_item_id === null || (is_array($stock_item_id) && count($stock_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_item_id when calling stockItemsGetStockItemBalanceForBatchProperty'
            );
        }
        // verify the required parameter 'stock_id' is set
        if ($stock_id === null || (is_array($stock_id) && count($stock_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_id when calling stockItemsGetStockItemBalanceForBatchProperty'
            );
        }
        // verify the required parameter 'property_number' is set
        if ($property_number === null || (is_array($property_number) && count($property_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_number when calling stockItemsGetStockItemBalanceForBatchProperty'
            );
        }
        // verify the required parameter 'database_path' is set
        if ($database_path === null || (is_array($database_path) && count($database_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_path when calling stockItemsGetStockItemBalanceForBatchProperty'
            );
        }

        $resourcePath = '/api/v1/stockitems/propertyBalances/{stockItemId}/{stockId}/{propertyNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, '', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }

        // header params
        if ($database_path !== null) {
            $headerParams['DatabasePath'] = ObjectSerializer::toHeaderValue($database_path);
        }

        // path params
        if ($stock_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockItemId' . '}',
                ObjectSerializer::toPathValue($stock_item_id),
                $resourcePath
            );
        }
        // path params
        if ($stock_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockId' . '}',
                ObjectSerializer::toPathValue($stock_id),
                $resourcePath
            );
        }
        // path params
        if ($property_number !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyNumber' . '}',
                ObjectSerializer::toPathValue($property_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stockItemsGetStockItems
     *
     * Vracia zoznam všetkých skladových kariet.
     *
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string[] $tables Zoznam podtabuliek skladovej karty&lt;br&gt;ALL - všetky podtabuľky&lt;br&gt;ACCESSORIES - príslušenstvo&lt;br&gt;ALTERNATIVES - alternatívy&lt;br&gt;ENCLOSURES - prílohy&lt;br&gt;GROUPS - skupiny&lt;br&gt;PARAMS - parametre&lt;br&gt;CODES - kódy (optional)
     * @param  string[] $stock_code Filter: Kód skladu   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string[] $supplier_code Filter: Kód dodávateľa   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DtoStockItems[]
     */
    public function stockItemsGetStockItems($database_path, $tables = null, $stock_code = null, $supplier_code = null, $select = null)
    {
        list($response) = $this->stockItemsGetStockItemsWithHttpInfo($database_path, $tables, $stock_code, $supplier_code, $select);
        return $response;
    }

    /**
     * Operation stockItemsGetStockItemsWithHttpInfo
     *
     * Vracia zoznam všetkých skladových kariet.
     *
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string[] $tables Zoznam podtabuliek skladovej karty&lt;br&gt;ALL - všetky podtabuľky&lt;br&gt;ACCESSORIES - príslušenstvo&lt;br&gt;ALTERNATIVES - alternatívy&lt;br&gt;ENCLOSURES - prílohy&lt;br&gt;GROUPS - skupiny&lt;br&gt;PARAMS - parametre&lt;br&gt;CODES - kódy (optional)
     * @param  string[] $stock_code Filter: Kód skladu   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string[] $supplier_code Filter: Kód dodávateľa   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DtoStockItems[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stockItemsGetStockItemsWithHttpInfo($database_path, $tables = null, $stock_code = null, $supplier_code = null, $select = null)
    {
        $request = $this->stockItemsGetStockItemsRequest($database_path, $tables, $stock_code, $supplier_code, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DtoStockItems[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DtoStockItems[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DtoStockItems[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DtoStockItems[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stockItemsGetStockItemsAsync
     *
     * Vracia zoznam všetkých skladových kariet.
     *
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string[] $tables Zoznam podtabuliek skladovej karty&lt;br&gt;ALL - všetky podtabuľky&lt;br&gt;ACCESSORIES - príslušenstvo&lt;br&gt;ALTERNATIVES - alternatívy&lt;br&gt;ENCLOSURES - prílohy&lt;br&gt;GROUPS - skupiny&lt;br&gt;PARAMS - parametre&lt;br&gt;CODES - kódy (optional)
     * @param  string[] $stock_code Filter: Kód skladu   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string[] $supplier_code Filter: Kód dodávateľa   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockItemsGetStockItemsAsync($database_path, $tables = null, $stock_code = null, $supplier_code = null, $select = null)
    {
        return $this->stockItemsGetStockItemsAsyncWithHttpInfo($database_path, $tables, $stock_code, $supplier_code, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stockItemsGetStockItemsAsyncWithHttpInfo
     *
     * Vracia zoznam všetkých skladových kariet.
     *
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string[] $tables Zoznam podtabuliek skladovej karty&lt;br&gt;ALL - všetky podtabuľky&lt;br&gt;ACCESSORIES - príslušenstvo&lt;br&gt;ALTERNATIVES - alternatívy&lt;br&gt;ENCLOSURES - prílohy&lt;br&gt;GROUPS - skupiny&lt;br&gt;PARAMS - parametre&lt;br&gt;CODES - kódy (optional)
     * @param  string[] $stock_code Filter: Kód skladu   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string[] $supplier_code Filter: Kód dodávateľa   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockItemsGetStockItemsAsyncWithHttpInfo($database_path, $tables = null, $stock_code = null, $supplier_code = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\DtoStockItems[]';
        $request = $this->stockItemsGetStockItemsRequest($database_path, $tables, $stock_code, $supplier_code, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stockItemsGetStockItems'
     *
     * @param  string $database_path Cesta ku zdrojovej ONIX databáze. (required)
     * @param  string[] $tables Zoznam podtabuliek skladovej karty&lt;br&gt;ALL - všetky podtabuľky&lt;br&gt;ACCESSORIES - príslušenstvo&lt;br&gt;ALTERNATIVES - alternatívy&lt;br&gt;ENCLOSURES - prílohy&lt;br&gt;GROUPS - skupiny&lt;br&gt;PARAMS - parametre&lt;br&gt;CODES - kódy (optional)
     * @param  string[] $stock_code Filter: Kód skladu   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string[] $supplier_code Filter: Kód dodávateľa   Ako filter je možné použiť, ktorékoľvek pole z modelu. (optional)
     * @param  string $select Definovanie polí, ktoré majú byť vo výsledku volania (JSON). Zadávajte ako názvy stĺpcov z modelu oddelené čiarkou. V prípade podzáznamov tabuľky zadávajte ako NazovPodtabulky.NazovPola. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function stockItemsGetStockItemsRequest($database_path, $tables = null, $stock_code = null, $supplier_code = null, $select = null)
    {
        // verify the required parameter 'database_path' is set
        if ($database_path === null || (is_array($database_path) && count($database_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database_path when calling stockItemsGetStockItems'
            );
        }

        $resourcePath = '/api/v1/stockitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tables !== null) {
            if('form' === 'form' && is_array($tables)) {
                foreach($tables as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tables'] = $tables;
            }
        }
        // query params
        if ($stock_code !== null) {
            if('form' === 'form' && is_array($stock_code)) {
                foreach($stock_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['StockCode'] = $stock_code;
            }
        }
        // query params
        if ($supplier_code !== null) {
            if('form' === 'form' && is_array($supplier_code)) {
                foreach($supplier_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['SupplierCode'] = $supplier_code;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, '', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }

        // header params
        if ($database_path !== null) {
            $headerParams['DatabasePath'] = ObjectSerializer::toHeaderValue($database_path);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
